// Auto-generated completion documentation
// This file is generated by completion-docs.ts - do not edit manually

export interface CompletionDocItem {
  type: 'function' | 'transform';
  name: string;
  label: string;
  description: string;
  detail: string;
  documentation: string;
  examples: string[];
  parameters: {
    name: string;
    description: string;
    type: string;
    optional: boolean;
  }[];
  returns: {
    type: string;
    description: string;
  };
  insertText: string;
  aliases?: string[];
}

export const completionDocs: CompletionDocItem[] = [
  {
    "type": "function",
    "name": "absoluteValue",
    "label": "abs",
    "description": "Returns the absolute value of a number.",
    "detail": "JEXL function",
    "documentation": "Returns the absolute value of a number.\n\n**Examples:**\n`absoluteValue(-5) // 5`\n`(-10)|absoluteValue // 10`\n`absoluteValue(3.14) // 3.14`\n\n**Parameters:**\n- `input` (unknown): The input number to get the absolute value of.\n\n**Returns:** The absolute value, or NaN if input cannot be converted to a number.",
    "examples": [
      "absoluteValue(-5) // 5",
      "(-10)|absoluteValue // 10",
      "absoluteValue(3.14) // 3.14"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to get the absolute value of.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The absolute value, or NaN if input cannot be converted to a number."
    },
    "insertText": "abs(${1:input})",
    "aliases": [
      "absoluteValue"
    ]
  },
  {
    "type": "function",
    "name": "arrayEvery",
    "label": "all",
    "description": "Checks whether the provided array has all elements that match the specified expression.\r",
    "detail": "JEXL function",
    "documentation": "Checks whether the provided array has all elements that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`every([2, 4, 6], \"value % 2 == 0\") // true`\n`[{age: 25}, {age: 35}]|every(\"value.age > 20\") // true`\n`every([1, 2, 3], \"value > 2\") // false`\n\n**Parameters:**\n- `input` (array): The input array to test.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** True if all elements match the expression, false otherwise or if input is not an array.",
    "examples": [
      "every([2, 4, 6], \"value % 2 == 0\") // true",
      "[{age: 25}, {age: 35}]|every(\"value.age > 20\") // true",
      "every([1, 2, 3], \"value > 2\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to test.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if all elements match the expression, false otherwise or if input is not an array."
    },
    "insertText": "all(${1:input}, ${2:expression})",
    "aliases": [
      "arrayEvery",
      "every"
    ]
  },
  {
    "type": "function",
    "name": "arrayAny",
    "label": "any",
    "description": "Checks whether the provided array has any elements that match the specified expression.\r",
    "detail": "JEXL function",
    "documentation": "Checks whether the provided array has any elements that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`any([1, 2, 3], \"value > 2\") // true`\n`[{age: 25}, {age: 35}]|any(\"value.age > 30\") // true`\n`any([1, 2, 3], \"value > 5\") // false`\n\n**Parameters:**\n- `input` (array): The input array to test.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** True if any element matches the expression, false otherwise or if input is not an array.",
    "examples": [
      "any([1, 2, 3], \"value > 2\") // true",
      "[{age: 25}, {age: 35}]|any(\"value.age > 30\") // true",
      "any([1, 2, 3], \"value > 5\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to test.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if any element matches the expression, false otherwise or if input is not an array."
    },
    "insertText": "any(${1:input}, ${2:expression})",
    "aliases": [
      "arrayAny",
      "some"
    ]
  },
  {
    "type": "function",
    "name": "arrayAppend",
    "label": "append",
    "description": "Appends elements to an array.",
    "detail": "JEXL function",
    "documentation": "Appends elements to an array.\n\n**Examples:**\n`append([1, 2], 3) // [1, 2, 3]`\n`[1, 2]|append(3, 4) // [1, 2, 3, 4]`\n`append([], 1, 2, 3) // [1, 2, 3]`\n\n**Parameters:**\n- `input` (array): The input values to append to an array.\n\n**Returns:** A new array with all inputs flattened and appended, or empty array if no valid input.",
    "examples": [
      "append([1, 2], 3) // [1, 2, 3]",
      "[1, 2]|append(3, 4) // [1, 2, 3, 4]",
      "append([], 1, 2, 3) // [1, 2, 3]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input values to append to an array.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with all inputs flattened and appended, or empty array if no valid input."
    },
    "insertText": "append(${1:input})",
    "aliases": [
      "arrayAppend",
      "concat"
    ]
  },
  {
    "type": "function",
    "name": "average",
    "label": "average",
    "description": "Calculates the average of an array of numbers.",
    "detail": "JEXL function",
    "documentation": "Calculates the average of an array of numbers.\n\n**Examples:**\n`average([1, 2, 3, 4]) // 2.5`\n`[10, 20, 30]|average // 20`\n`average(1, 2, 3, 4) // 2.5`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The average value, or NaN if input is not an array.",
    "examples": [
      "average([1, 2, 3, 4]) // 2.5",
      "[10, 20, 30]|average // 20",
      "average(1, 2, 3, 4) // 2.5"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The average value, or NaN if input is not an array."
    },
    "insertText": "average(${1:input})",
    "aliases": [
      "avg"
    ]
  },
  {
    "type": "function",
    "name": "base64Decode",
    "label": "base64Decode",
    "description": "Decodes a Base64 encoded string.",
    "detail": "JEXL function",
    "documentation": "Decodes a Base64 encoded string.\n\n**Examples:**\n`base64Decode(\"aGVsbG8=\") // \"hello\"`\n`\"aGVsbG8gd29ybGQ=\"|base64Decode // \"hello world\"`\n`base64Decode(\"dGVzdA==\") // \"test\"`\n\n**Parameters:**\n- `input` (unknown): The Base64 encoded string to decode.\n\n**Returns:** The decoded string, or empty string if input is not a string.",
    "examples": [
      "base64Decode(\"aGVsbG8=\") // \"hello\"",
      "\"aGVsbG8gd29ybGQ=\"|base64Decode // \"hello world\"",
      "base64Decode(\"dGVzdA==\") // \"test\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The Base64 encoded string to decode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The decoded string, or empty string if input is not a string."
    },
    "insertText": "base64Decode(${1:input})"
  },
  {
    "type": "function",
    "name": "base64Encode",
    "label": "base64Encode",
    "description": "Encodes a string to Base64.",
    "detail": "JEXL function",
    "documentation": "Encodes a string to Base64.\n\n**Examples:**\n`base64Encode(\"hello\") // \"aGVsbG8=\"`\n`\"hello world\"|base64Encode // \"aGVsbG8gd29ybGQ=\"`\n`base64Encode(\"test\") // \"dGVzdA==\"`\n\n**Parameters:**\n- `input` (unknown): The input string to encode.\n\n**Returns:** The Base64 encoded string, or empty string if input is not a string or encoding fails.",
    "examples": [
      "base64Encode(\"hello\") // \"aGVsbG8=\"",
      "\"hello world\"|base64Encode // \"aGVsbG8gd29ybGQ=\"",
      "base64Encode(\"test\") // \"dGVzdA==\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to encode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The Base64 encoded string, or empty string if input is not a string or encoding fails."
    },
    "insertText": "base64Encode(${1:input})"
  },
  {
    "type": "function",
    "name": "toBoolean",
    "label": "boolean",
    "description": "Converts the input to a boolean.",
    "detail": "JEXL function",
    "documentation": "Converts the input to a boolean.\n\n**Examples:**\n`toBoolean(\"true\") // true`\n`\"false\"|toBoolean // false`\n`toBoolean(1) // true`\n\n**Parameters:**\n- `input` (unknown): The input to convert to a boolean.\n\n**Returns:** The boolean value, or undefined for ambiguous string values.",
    "examples": [
      "toBoolean(\"true\") // true",
      "\"false\"|toBoolean // false",
      "toBoolean(1) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to a boolean.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "The boolean value, or undefined for ambiguous string values."
    },
    "insertText": "boolean(${1:input})",
    "aliases": [
      "toBoolean",
      "bool"
    ]
  },
  {
    "type": "function",
    "name": "camelCase",
    "label": "camelCase",
    "description": "Converts the input string to camel case.",
    "detail": "JEXL function",
    "documentation": "Converts the input string to camel case.\n\n**Examples:**\n`camelCase(\"foo bar\") // \"fooBar\"`\n`\"hello-world\"|camelCase // \"helloWorld\"`\n`camelCase(\"HELLO_WORLD\") // \"helloWorld\"`\n\n**Parameters:**\n- `input` (unknown): The input string to convert to camel case.\n\n**Returns:** The camel case string, or empty string if input is not a string.",
    "examples": [
      "camelCase(\"foo bar\") // \"fooBar\"",
      "\"hello-world\"|camelCase // \"helloWorld\"",
      "camelCase(\"HELLO_WORLD\") // \"helloWorld\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to convert to camel case.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The camel case string, or empty string if input is not a string."
    },
    "insertText": "camelCase(${1:input})"
  },
  {
    "type": "function",
    "name": "switchCase",
    "label": "case",
    "description": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.",
    "detail": "JEXL function",
    "documentation": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\n\n**Examples:**\n`switch(expression, case1, result1, case2, result2, ..., default)`\n\n**Parameters:**\n- `args` (array): The arguments array where the first element is the expression to evaluate, followed by pairs of case and result, and optionally a default value.\n\n**Returns:** The result of the first case whose predicate is satisfied, or the default value if no case is satisfied.",
    "examples": [
      "switch(expression, case1, result1, case2, result2, ..., default)"
    ],
    "parameters": [
      {
        "name": "args",
        "description": "The arguments array where the first element is the expression to evaluate, followed by pairs of case and result, and optionally a default value.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The result of the first case whose predicate is satisfied, or the default value if no case is satisfied."
    },
    "insertText": "case(${1:args})",
    "aliases": [
      "switchCase",
      "switch"
    ]
  },
  {
    "type": "function",
    "name": "ceil",
    "label": "ceil",
    "description": "Rounds a number up to the nearest integer.",
    "detail": "JEXL function",
    "documentation": "Rounds a number up to the nearest integer.\n\n**Examples:**\n`ceil(3.2) // 4`\n`(3.14)|ceil // 4`\n`ceil(-2.8) // -2`\n\n**Parameters:**\n- `input` (unknown): The input number to round up.\n\n**Returns:** The rounded up integer, or NaN if input cannot be converted to a number.",
    "examples": [
      "ceil(3.2) // 4",
      "(3.14)|ceil // 4",
      "ceil(-2.8) // -2"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round up.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded up integer, or NaN if input cannot be converted to a number."
    },
    "insertText": "ceil(${1:input})"
  },
  {
    "type": "function",
    "name": "contains",
    "label": "contains",
    "description": "Checks if the input string or array contains the specified value.",
    "detail": "JEXL function",
    "documentation": "Checks if the input string or array contains the specified value.\n\n**Examples:**\n`contains(\"hello world\", \"world\") // true`\n`\"foo-bar\"|contains(\"bar\") // true`\n`contains([1, 2, 3], 2) // true`\n\n**Parameters:**\n- `input` (unknown): The input string or array to search in.\n- `search` (string): The value to search for.\n\n**Returns:** True if the input contains the search value, false otherwise.",
    "examples": [
      "contains(\"hello world\", \"world\") // true",
      "\"foo-bar\"|contains(\"bar\") // true",
      "contains([1, 2, 3], 2) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string or array to search in.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The value to search for.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input contains the search value, false otherwise."
    },
    "insertText": "contains(${1:input}, ${2:search})",
    "aliases": [
      "includes"
    ]
  },
  {
    "type": "function",
    "name": "dateTimeAdd",
    "label": "dateTimeAdd",
    "description": "Adds a time range to a date and time in the ISO 8601 format.",
    "detail": "JEXL function",
    "documentation": "Adds a time range to a date and time in the ISO 8601 format.\n\n**Examples:**\n`dateTimeAdd(\"2023-12-25T10:30:00.000Z\", \"day\", 1) // \"2023-12-26T10:30:00.000Z\"`\n`now()|dateTimeAdd(\"hour\", -2) // Two hours ago`\n`dateTimeAdd(\"2023-01-01T00:00:00.000Z\", \"month\", 3) // \"2023-04-01T00:00:00.000Z\"`\n\n**Parameters:**\n- `input` (string): The input date and time string in ISO 8601 format.\n- `unit` (string): The time unit to add (\"day\", \"hour\", \"minute\", \"second\", \"month\", \"year\", etc.).\n- `value` (number): The amount to add (can be negative to subtract).\n\n**Returns:** The new date and time as an ISO 8601 string.",
    "examples": [
      "dateTimeAdd(\"2023-12-25T10:30:00.000Z\", \"day\", 1) // \"2023-12-26T10:30:00.000Z\"",
      "now()|dateTimeAdd(\"hour\", -2) // Two hours ago",
      "dateTimeAdd(\"2023-01-01T00:00:00.000Z\", \"month\", 3) // \"2023-04-01T00:00:00.000Z\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input date and time string in ISO 8601 format.",
        "type": "string",
        "optional": false
      },
      {
        "name": "unit",
        "description": "The time unit to add (\"day\", \"hour\", \"minute\", \"second\", \"month\", \"year\", etc.).",
        "type": "string",
        "optional": false
      },
      {
        "name": "value",
        "description": "The amount to add (can be negative to subtract).",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The new date and time as an ISO 8601 string."
    },
    "insertText": "dateTimeAdd(${1:input}, ${2:unit}, ${3:value})"
  },
  {
    "type": "function",
    "name": "dateTimeFormat",
    "label": "dateTimeFormat",
    "description": "Converts a date and time to a provided format.",
    "detail": "JEXL function",
    "documentation": "Converts a date and time to a provided format.\n\n**Examples:**\n`dateTimeFormat(datetime, format)`\n`datetime|dateTimeFormat(format)`\n\n**Parameters:**\n- `input` (union): The input date and time, either as a string or number.\n- `format` (string): The format to convert the date and time to.\n\n**Returns:** The date and time in the specified format.",
    "examples": [
      "dateTimeFormat(datetime, format)",
      "datetime|dateTimeFormat(format)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input date and time, either as a string or number.",
        "type": "union",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format to convert the date and time to.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The date and time in the specified format."
    },
    "insertText": "dateTimeFormat(${1:input}, ${2:format})"
  },
  {
    "type": "function",
    "name": "dateTimeToMillis",
    "label": "dateTimeToMillis",
    "description": "Parses the date and time in the ISO 8601 format and returns the number of milliseconds since the Unix epoch.",
    "detail": "JEXL function",
    "documentation": "Parses the date and time in the ISO 8601 format and returns the number of milliseconds since the Unix epoch.\n\n**Examples:**\n`dateTimeToMillis(\"2023-12-25T10:30:00.000Z\") // 1703505000000`\n`\"2023-01-01T00:00:00.000Z\"|dateTimeToMillis // 1672531200000`\n`dateTimeToMillis(\"2023-12-25\") // 1703462400000`\n\n**Parameters:**\n- `input` (string): The date and time string to parse.\n\n**Returns:** The timestamp in milliseconds since Unix epoch.",
    "examples": [
      "dateTimeToMillis(\"2023-12-25T10:30:00.000Z\") // 1703505000000",
      "\"2023-01-01T00:00:00.000Z\"|dateTimeToMillis // 1672531200000",
      "dateTimeToMillis(\"2023-12-25\") // 1703462400000"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The date and time string to parse.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The timestamp in milliseconds since Unix epoch."
    },
    "insertText": "dateTimeToMillis(${1:input})",
    "aliases": [
      "toMillis"
    ]
  },
  {
    "type": "function",
    "name": "arrayDistinct",
    "label": "distinct",
    "description": "Returns a new array with duplicate elements removed.",
    "detail": "JEXL function",
    "documentation": "Returns a new array with duplicate elements removed.\n\n**Examples:**\n`distinct([1, 2, 2, 3, 1]) // [1, 2, 3]`\n`[1, 2, 2, 3]|distinct // [1, 2, 3]`\n`distinct([\"a\", \"b\", \"a\", \"c\"]) // [\"a\", \"b\", \"c\"]`\n\n**Parameters:**\n- `input` (array): The input array to remove duplicates from.\n\n**Returns:** A new array with duplicates removed, or empty array if input is not an array.",
    "examples": [
      "distinct([1, 2, 2, 3, 1]) // [1, 2, 3]",
      "[1, 2, 2, 3]|distinct // [1, 2, 3]",
      "distinct([\"a\", \"b\", \"a\", \"c\"]) // [\"a\", \"b\", \"c\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to remove duplicates from.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with duplicates removed, or empty array if input is not an array."
    },
    "insertText": "distinct(${1:input})",
    "aliases": [
      "arrayDistinct"
    ]
  },
  {
    "type": "function",
    "name": "endsWith",
    "label": "endsWith",
    "description": "Checks if the input string ends with the specified substring.",
    "detail": "JEXL function",
    "documentation": "Checks if the input string ends with the specified substring.\n\n**Examples:**\n`endsWith(\"hello world\", \"world\") // true`\n`\"foo-bar\"|endsWith(\"bar\") // true`\n`endsWith(\"test\", \"xyz\") // false`\n\n**Parameters:**\n- `input` (unknown): The input string to check.\n- `search` (string): The substring to search for at the end.\n\n**Returns:** True if the input ends with the search string, false otherwise.",
    "examples": [
      "endsWith(\"hello world\", \"world\") // true",
      "\"foo-bar\"|endsWith(\"bar\") // true",
      "endsWith(\"test\", \"xyz\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to check.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The substring to search for at the end.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input ends with the search string, false otherwise."
    },
    "insertText": "endsWith(${1:input}, ${2:search})"
  },
  {
    "type": "function",
    "name": "objectEntries",
    "label": "entries",
    "description": "Returns an array of key-value pairs from the input object.",
    "detail": "JEXL function",
    "documentation": "Returns an array of key-value pairs from the input object.\n\n**Examples:**\n`entries({name: \"John\", age: 30}) // [[\"name\", \"John\"], [\"age\", 30]]`\n`{a: 1, b: 2}|entries // [[\"a\", 1], [\"b\", 2]]`\n`entries({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get entries from.\n\n**Returns:** An array of [key, value] pairs, or undefined if input is not an object.",
    "examples": [
      "entries({name: \"John\", age: 30}) // [[\"name\", \"John\"], [\"age\", 30]]",
      "{a: 1, b: 2}|entries // [[\"a\", 1], [\"b\", 2]]",
      "entries({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get entries from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of [key, value] pairs, or undefined if input is not an object."
    },
    "insertText": "entries(${1:input})",
    "aliases": [
      "objectEntries"
    ]
  },
  {
    "type": "function",
    "name": "_eval",
    "label": "eval",
    "description": "Evaluates a JEXL expression and returns the result.\r",
    "detail": "JEXL function",
    "documentation": "Evaluates a JEXL expression and returns the result.\r\nIf only one argument is provided, it is expected that the first argument is a JEXL expression.\r\nIf two arguments are provided, the first argument is the context (must be an object) and the second argument is the JEXL expression.\r\nThe expression uses the default JEXL extended grammar and can't use any custom defined functions or transforms.\n\n**Examples:**\n`_eval(\"1 + 2\") // 3`\n`_eval({x: 5, y: 10}, \"x + y\") // 15`\n`\"2 * 3\"|_eval // 6`\n\n**Parameters:**\n- `input` (unknown): Either a JEXL expression string or a context object.\n- `expression` (string): Optional JEXL expression when first argument is context.\n\n**Returns:** The result of evaluating the expression, or undefined if evaluation fails.",
    "examples": [
      "_eval(\"1 + 2\") // 3",
      "_eval({x: 5, y: 10}, \"x + y\") // 15",
      "\"2 * 3\"|_eval // 6"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "Either a JEXL expression string or a context object.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "expression",
        "description": "Optional JEXL expression when first argument is context.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "any",
      "description": "The result of evaluating the expression, or undefined if evaluation fails."
    },
    "insertText": "eval(${1:input}, ${2:expression})",
    "aliases": [
      "_eval"
    ]
  },
  {
    "type": "function",
    "name": "arrayFilter",
    "label": "filter",
    "description": "Returns a new array with the elements of the input array that match the specified expression.\r",
    "detail": "JEXL function",
    "documentation": "Returns a new array with the elements of the input array that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`filter([1, 2, 3, 4], \"value > 2\") // [3, 4]`\n`[{age: 25}, {age: 35}]|filter(\"value.age > 30\") // [{age: 35}]`\n`filter([1, 2, 3, 4], \"value % 2 == 0\") // [2, 4]`\n\n**Parameters:**\n- `input` (array): The input array to filter.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** A new array containing only elements that match the expression, or empty array if input is not an array.",
    "examples": [
      "filter([1, 2, 3, 4], \"value > 2\") // [3, 4]",
      "[{age: 25}, {age: 35}]|filter(\"value.age > 30\") // [{age: 35}]",
      "filter([1, 2, 3, 4], \"value % 2 == 0\") // [2, 4]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to filter.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array containing only elements that match the expression, or empty array if input is not an array."
    },
    "insertText": "filter(${1:input}, ${2:expression})",
    "aliases": [
      "arrayFilter"
    ]
  },
  {
    "type": "function",
    "name": "arrayFind",
    "label": "find",
    "description": "Finds the first element in an array that matches the specified expression.\r",
    "detail": "JEXL function",
    "documentation": "Finds the first element in an array that matches the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`find([1, 2, 3, 4], \"value > 2\") // 3`\n`[{name: \"John\"}, {name: \"Jane\"}]|find(\"value.name == 'Jane'\") // {name: \"Jane\"}`\n`find([1, 2, 3], \"value > 5\") // undefined`\n\n**Parameters:**\n- `input` (array): The input array to search.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** The first element that matches the expression, or undefined if no match found or input is not an array.",
    "examples": [
      "find([1, 2, 3, 4], \"value > 2\") // 3",
      "[{name: \"John\"}, {name: \"Jane\"}]|find(\"value.name == 'Jane'\") // {name: \"Jane\"}",
      "find([1, 2, 3], \"value > 5\") // undefined"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to search.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The first element that matches the expression, or undefined if no match found or input is not an array."
    },
    "insertText": "find(${1:input}, ${2:expression})",
    "aliases": [
      "arrayFind"
    ]
  },
  {
    "type": "function",
    "name": "arrayFindIndex",
    "label": "findIndex",
    "description": "Finds the index of the first element in the input array that satisfies the given Jexl expression.",
    "detail": "JEXL function",
    "documentation": "Finds the index of the first element in the input array that satisfies the given Jexl expression.\n\n**Examples:**\n`[1, 2, 3, 4]|findIndex('value > 2'); // returns 2`\n\n**Parameters:**\n- `input` (array): The array to search through.\n- `expression` (string): A Jexl expression string to evaluate for each element. The expression has access to \n\n**Returns:** The index of the first matching element, or ",
    "examples": [
      "[1, 2, 3, 4]|findIndex('value > 2'); // returns 2"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The array to search through.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "A Jexl expression string to evaluate for each element. The expression has access to ",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The index of the first matching element, or "
    },
    "insertText": "findIndex(${1:input}, ${2:expression})",
    "aliases": [
      "arrayFindIndex"
    ]
  },
  {
    "type": "function",
    "name": "floor",
    "label": "floor",
    "description": "Rounds a number down to the nearest integer.",
    "detail": "JEXL function",
    "documentation": "Rounds a number down to the nearest integer.\n\n**Examples:**\n`floor(3.7) // 3`\n`(3.14)|floor // 3`\n`floor(-2.8) // -3`\n\n**Parameters:**\n- `input` (unknown): The input number to round down.\n\n**Returns:** The rounded down integer, or NaN if input cannot be converted to a number.",
    "examples": [
      "floor(3.7) // 3",
      "(3.14)|floor // 3",
      "floor(-2.8) // -3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round down.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded down integer, or NaN if input cannot be converted to a number."
    },
    "insertText": "floor(${1:input})"
  },
  {
    "type": "function",
    "name": "formatBase",
    "label": "formatBase",
    "description": "Formats a number as a string in the specified base.",
    "detail": "JEXL function",
    "documentation": "Formats a number as a string in the specified base.\n\n**Examples:**\n`formatBase(255, 16) // \"ff\"`\n`(10)|formatBase(2) // \"1010\"`\n`formatBase(64, 8) // \"100\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `base` (number): The numeric base to convert to (2-36).\n\n**Returns:** The number formatted in the specified base, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatBase(255, 16) // \"ff\"",
      "(10)|formatBase(2) // \"1010\"",
      "formatBase(64, 8) // \"100\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "base",
        "description": "The numeric base to convert to (2-36).",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The number formatted in the specified base, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatBase(${1:input}, ${2:base})"
  },
  {
    "type": "function",
    "name": "formatInteger",
    "label": "formatInteger",
    "description": "Formats a number as an integer with zero padding.",
    "detail": "JEXL function",
    "documentation": "Formats a number as an integer with zero padding.\n\n**Examples:**\n`formatInteger(42, \"000\") // \"042\"`\n`(7)|formatInteger(\"0000\") // \"0007\"`\n`formatInteger(123, \"00\") // \"123\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `format` (string): The format string indicating the minimum number of digits.\n\n**Returns:** The zero-padded integer string, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatInteger(42, \"000\") // \"042\"",
      "(7)|formatInteger(\"0000\") // \"0007\"",
      "formatInteger(123, \"00\") // \"123\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format string indicating the minimum number of digits.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The zero-padded integer string, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatInteger(${1:input}, ${2:format})"
  },
  {
    "type": "function",
    "name": "formatNumber",
    "label": "formatNumber",
    "description": "Formats a number to a decimal representation as specified by the format string.",
    "detail": "JEXL function",
    "documentation": "Formats a number to a decimal representation as specified by the format string.\n\n**Examples:**\n`formatNumber(1234.567, \"#,##0.00\") // \"1,234.57\"`\n`(1000)|formatNumber(\"0.00\") // \"1000.00\"`\n`formatNumber(42, \"#,###\") // \"42\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `format` (string): The format string specifying decimal places and grouping.\n\n**Returns:** The formatted number string, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatNumber(1234.567, \"#,##0.00\") // \"1,234.57\"",
      "(1000)|formatNumber(\"0.00\") // \"1000.00\"",
      "formatNumber(42, \"#,###\") // \"42\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format string specifying decimal places and grouping.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The formatted number string, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatNumber(${1:input}, ${2:format})"
  },
  {
    "type": "function",
    "name": "formUrlEncoded",
    "label": "formUrlEncoded",
    "description": "Encodes a string or object to URI component format.",
    "detail": "JEXL function",
    "documentation": "Encodes a string or object to URI component format.\n\n**Examples:**\n`formUrlEncoded(\"hello world\") // \"hello%20world\"`\n`formUrlEncoded({name: \"John\", age: 30}) // \"name=John&age=30\"`\n`\"hello & world\"|formUrlEncoded // \"hello%20%26%20world\"`\n\n**Parameters:**\n- `input` (unknown): The input string or object to encode.\n\n**Returns:** The URL encoded string, or empty string if input is not a string or object.",
    "examples": [
      "formUrlEncoded(\"hello world\") // \"hello%20world\"",
      "formUrlEncoded({name: \"John\", age: 30}) // \"name=John&age=30\"",
      "\"hello & world\"|formUrlEncoded // \"hello%20%26%20world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string or object to encode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The URL encoded string, or empty string if input is not a string or object."
    },
    "insertText": "formUrlEncoded(${1:input})"
  },
  {
    "type": "function",
    "name": "arrayJoin",
    "label": "join",
    "description": "Joins elements of an array into a string.",
    "detail": "JEXL function",
    "documentation": "Joins elements of an array into a string.\n\n**Examples:**\n`arrayJoin([\"foo\", \"bar\", \"baz\"], \",\") // \"foo,bar,baz\"`\n`[\"one\", \"two\", \"three\"]|arrayJoin(\"-\") // \"one-two-three\"`\n`arrayJoin([1, 2, 3]) // \"1,2,3\"`\n\n**Parameters:**\n- `input` (unknown): The input array to join.\n- `separator` (string?): The separator string to use between elements. Defaults to comma.\n\n**Returns:** The joined string, or undefined if input is not an array.",
    "examples": [
      "arrayJoin([\"foo\", \"bar\", \"baz\"], \",\") // \"foo,bar,baz\"",
      "[\"one\", \"two\", \"three\"]|arrayJoin(\"-\") // \"one-two-three\"",
      "arrayJoin([1, 2, 3]) // \"1,2,3\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to join.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "separator",
        "description": "The separator string to use between elements. Defaults to comma.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The joined string, or undefined if input is not an array."
    },
    "insertText": "join(${1:input}, ${2:separator?})",
    "aliases": [
      "arrayJoin"
    ]
  },
  {
    "type": "function",
    "name": "toJson",
    "label": "json",
    "description": "Parses the string and returns a JSON object.",
    "detail": "JEXL function",
    "documentation": "Parses the string and returns a JSON object.\n\n**Examples:**\n`toJson('{\"key\": \"value\"}') // { key: \"value\" }`\n`'{\"name\": \"John\", \"age\": 30}'|toJson // { name: \"John\", age: 30 }`\n\n**Parameters:**\n- `input` (string): The JSON string to parse.\n\n**Returns:** The parsed JSON object or value.",
    "examples": [
      "toJson('{\"key\": \"value\"}') // { key: \"value\" }",
      "'{\"name\": \"John\", \"age\": 30}'|toJson // { name: \"John\", age: 30 }"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The JSON string to parse.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "any",
      "description": "The parsed JSON object or value."
    },
    "insertText": "json(${1:input})",
    "aliases": [
      "toJson",
      "parseJson"
    ]
  },
  {
    "type": "function",
    "name": "objectKeys",
    "label": "keys",
    "description": "Returns the keys of an object as an array.",
    "detail": "JEXL function",
    "documentation": "Returns the keys of an object as an array.\n\n**Examples:**\n`keys({name: \"John\", age: 30}) // [\"name\", \"age\"]`\n`{a: 1, b: 2}|keys // [\"a\", \"b\"]`\n`keys({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get keys from.\n\n**Returns:** An array of object keys, or undefined if input is not an object.",
    "examples": [
      "keys({name: \"John\", age: 30}) // [\"name\", \"age\"]",
      "{a: 1, b: 2}|keys // [\"a\", \"b\"]",
      "keys({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get keys from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of object keys, or undefined if input is not an object."
    },
    "insertText": "keys(${1:input})",
    "aliases": [
      "objectKeys"
    ]
  },
  {
    "type": "function",
    "name": "length",
    "label": "length",
    "description": "Returns the number of characters in a string, or the length of an array.",
    "detail": "JEXL function",
    "documentation": "Returns the number of characters in a string, or the length of an array.\n\n**Examples:**\n`length(\"hello\") // 5`\n`length([1, 2, 3]) // 3`\n\n**Parameters:**\n- `input` (unknown): The input can be a string, an array, or an object.\n\n**Returns:** The number of characters in a string, or the length of an array.",
    "examples": [
      "length(\"hello\") // 5",
      "length([1, 2, 3]) // 3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input can be a string, an array, or an object.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The number of characters in a string, or the length of an array."
    },
    "insertText": "length(${1:input})",
    "aliases": [
      "count",
      "size"
    ]
  },
  {
    "type": "function",
    "name": "lowercase",
    "label": "lowercase",
    "description": "Converts the input string to lowercase.",
    "detail": "JEXL function",
    "documentation": "Converts the input string to lowercase.\n\n**Examples:**\n`lowercase(\"HELLO\") // \"hello\"`\n`\"HELLO WORLD\"|lowercase // \"hello world\"`\n\n**Parameters:**\n- `input` (unknown): The input to convert to lowercase. Non-string inputs are converted to JSON string first.\n\n**Returns:** The lowercase string.",
    "examples": [
      "lowercase(\"HELLO\") // \"hello\"",
      "\"HELLO WORLD\"|lowercase // \"hello world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to lowercase. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The lowercase string."
    },
    "insertText": "lowercase(${1:input})",
    "aliases": [
      "lower"
    ]
  },
  {
    "type": "function",
    "name": "arrayMap",
    "label": "map",
    "description": "Returns an array containing the results of applying the expression parameter to each value in the array parameter.\r",
    "detail": "JEXL function",
    "documentation": "Returns an array containing the results of applying the expression parameter to each value in the array parameter.\r\nThe expression must be a valid JEXL expression string, which is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`map([1, 2, 3], \"value * 2\") // [2, 4, 6]`\n`[{name: \"John\"}, {name: \"Jane\"}]|map(\"value.name\") // [\"John\", \"Jane\"]`\n`map([1, 2, 3], \"value + index\") // [1, 3, 5]`\n\n**Parameters:**\n- `input` (array): The input array to transform.\n- `expression` (string): The JEXL expression to apply to each element.\n\n**Returns:** A new array with transformed elements, or undefined if input is not an array.",
    "examples": [
      "map([1, 2, 3], \"value * 2\") // [2, 4, 6]",
      "[{name: \"John\"}, {name: \"Jane\"}]|map(\"value.name\") // [\"John\", \"Jane\"]",
      "map([1, 2, 3], \"value + index\") // [1, 3, 5]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to transform.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to apply to each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with transformed elements, or undefined if input is not an array."
    },
    "insertText": "map(${1:input}, ${2:expression})",
    "aliases": [
      "arrayMap"
    ]
  },
  {
    "type": "function",
    "name": "mapField",
    "label": "mapField",
    "description": "Returns a new array with elements transformed by extracting a specific field.",
    "detail": "JEXL function",
    "documentation": "Returns a new array with elements transformed by extracting a specific field.\n\n**Examples:**\n`mapField([{name: \"John\"}, {name: \"Jane\"}], \"name\") // [\"John\", \"Jane\"]`\n`[{age: 30}, {age: 25}]|mapField(\"age\") // [30, 25]`\n`mapField([{x: 1, y: 2}, {x: 3, y: 4}], \"x\") // [1, 3]`\n\n**Parameters:**\n- `input` (array): The input array of objects to extract fields from.\n- `field` (string): The field name to extract from each object.\n\n**Returns:** A new array with extracted field values, or empty array if input is not an array.",
    "examples": [
      "mapField([{name: \"John\"}, {name: \"Jane\"}], \"name\") // [\"John\", \"Jane\"]",
      "[{age: 30}, {age: 25}]|mapField(\"age\") // [30, 25]",
      "mapField([{x: 1, y: 2}, {x: 3, y: 4}], \"x\") // [1, 3]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of objects to extract fields from.",
        "type": "array",
        "optional": false
      },
      {
        "name": "field",
        "description": "The field name to extract from each object.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with extracted field values, or empty array if input is not an array."
    },
    "insertText": "mapField(${1:input}, ${2:field})"
  },
  {
    "type": "function",
    "name": "max",
    "label": "max",
    "description": "Finds the maximum value in an array of numbers.",
    "detail": "JEXL function",
    "documentation": "Finds the maximum value in an array of numbers.\n\n**Examples:**\n`max([1, 5, 3, 2]) // 5`\n`[10, 20, 15]|max // 20`\n`max(1, 5, 3, 2) // 5`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The maximum value, or NaN if input is not an array.",
    "examples": [
      "max([1, 5, 3, 2]) // 5",
      "[10, 20, 15]|max // 20",
      "max(1, 5, 3, 2) // 5"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The maximum value, or NaN if input is not an array."
    },
    "insertText": "max(${1:input})"
  },
  {
    "type": "function",
    "name": "objectMerge",
    "label": "merge",
    "description": "Returns a new object with the properties of the input objects merged together.",
    "detail": "JEXL function",
    "documentation": "Returns a new object with the properties of the input objects merged together.\n\n**Examples:**\n`merge({a: 1}, {b: 2}) // {a: 1, b: 2}`\n`{a: 1}|merge({b: 2}, {c: 3}) // {a: 1, b: 2, c: 3}`\n`merge({a: 1}, {a: 2}) // {a: 2} (later values override)`\n\n**Parameters:**\n- `args` (array): The input objects to merge.\n\n**Returns:** A new object with all properties merged together.",
    "examples": [
      "merge({a: 1}, {b: 2}) // {a: 1, b: 2}",
      "{a: 1}|merge({b: 2}, {c: 3}) // {a: 1, b: 2, c: 3}",
      "merge({a: 1}, {a: 2}) // {a: 2} (later values override)"
    ],
    "parameters": [
      {
        "name": "args",
        "description": "The input objects to merge.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "Record",
      "description": "A new object with all properties merged together."
    },
    "insertText": "merge(${1:args})",
    "aliases": [
      "objectMerge"
    ]
  },
  {
    "type": "function",
    "name": "millis",
    "label": "millis",
    "description": "Returns the current date and time in milliseconds since the Unix epoch.",
    "detail": "JEXL function",
    "documentation": "Returns the current date and time in milliseconds since the Unix epoch.\n\n**Examples:**\n`millis() // 1703505000000`\n`millis() // 1703505123456 (different time)`\n\n**Returns:** The current timestamp in milliseconds.",
    "examples": [
      "millis() // 1703505000000",
      "millis() // 1703505123456 (different time)"
    ],
    "parameters": [],
    "returns": {
      "type": "number",
      "description": "The current timestamp in milliseconds."
    },
    "insertText": "millis()"
  },
  {
    "type": "function",
    "name": "toDateTime",
    "label": "millisToDateTime",
    "description": "Parses the number of milliseconds since the Unix epoch or parses a string (with or without specified format) and returns the date and time in the ISO 8601 format.",
    "detail": "JEXL function",
    "documentation": "Parses the number of milliseconds since the Unix epoch or parses a string (with or without specified format) and returns the date and time in the ISO 8601 format.\n\n**Examples:**\n`toDateTime(1703505000000) // \"2023-12-25T10:30:00.000Z\"`\n`toDateTime(\"2023-12-25\") // \"2023-12-25T00:00:00.000Z\"`\n`toDateTime(\"25/12/2023\", \"dd/MM/yyyy\") // \"2023-12-25T00:00:00.000Z\"`\n\n**Parameters:**\n- `input` (union?): Optional timestamp in milliseconds or date string.\n- `format` (string?): Optional format string for parsing date strings.\n\n**Returns:** The date and time as an ISO 8601 string, or undefined if parsing fails.",
    "examples": [
      "toDateTime(1703505000000) // \"2023-12-25T10:30:00.000Z\"",
      "toDateTime(\"2023-12-25\") // \"2023-12-25T00:00:00.000Z\"",
      "toDateTime(\"25/12/2023\", \"dd/MM/yyyy\") // \"2023-12-25T00:00:00.000Z\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "Optional timestamp in milliseconds or date string.",
        "type": "union",
        "optional": true
      },
      {
        "name": "format",
        "description": "Optional format string for parsing date strings.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The date and time as an ISO 8601 string, or undefined if parsing fails."
    },
    "insertText": "millisToDateTime(${1:input?}, ${2:format?})",
    "aliases": [
      "toDateTime",
      "fromMillis",
      "dateTimeString"
    ]
  },
  {
    "type": "function",
    "name": "min",
    "label": "min",
    "description": "Finds the minimum value in an array of numbers.",
    "detail": "JEXL function",
    "documentation": "Finds the minimum value in an array of numbers.\n\n**Examples:**\n`min([1, 5, 3, 2]) // 1`\n`[10, 20, 15]|min // 10`\n`min(1, 5, 3, 2) // 1`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The minimum value, or NaN if input is not an array.",
    "examples": [
      "min([1, 5, 3, 2]) // 1",
      "[10, 20, 15]|min // 10",
      "min(1, 5, 3, 2) // 1"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The minimum value, or NaN if input is not an array."
    },
    "insertText": "min(${1:input})"
  },
  {
    "type": "function",
    "name": "not",
    "label": "not",
    "description": "Returns the logical NOT of the input.",
    "detail": "JEXL function",
    "documentation": "Returns the logical NOT of the input.\n\n**Examples:**\n`not(true) // false`\n`false|not // true`\n`not(0) // true`\n\n**Parameters:**\n- `input` (unknown): The input to apply logical NOT to.\n\n**Returns:** The logical NOT of the input converted to boolean.",
    "examples": [
      "not(true) // false",
      "false|not // true",
      "not(0) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to apply logical NOT to.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "The logical NOT of the input converted to boolean."
    },
    "insertText": "not(${1:input})"
  },
  {
    "type": "function",
    "name": "now",
    "label": "now",
    "description": "Returns the current date and time in the ISO 8601 format.",
    "detail": "JEXL function",
    "documentation": "Returns the current date and time in the ISO 8601 format.\n\n**Examples:**\n`now() // \"2023-12-25T10:30:00.000Z\"`\n`now() // \"2023-12-25T14:45:30.123Z\" (different time)`\n\n**Returns:** The current date and time as an ISO 8601 string.",
    "examples": [
      "now() // \"2023-12-25T10:30:00.000Z\"",
      "now() // \"2023-12-25T14:45:30.123Z\" (different time)"
    ],
    "parameters": [],
    "returns": {
      "type": "string",
      "description": "The current date and time as an ISO 8601 string."
    },
    "insertText": "now()"
  },
  {
    "type": "function",
    "name": "toNumber",
    "label": "number",
    "description": "Converts the input to a number.",
    "detail": "JEXL function",
    "documentation": "Converts the input to a number.\n\n**Examples:**\n`toNumber(\"123\") // 123`\n`\"45.67\"|toNumber // 45.67`\n`toNumber(\"abc\") // NaN`\n\n**Parameters:**\n- `input` (unknown): The input to convert to a number.\n\n**Returns:** The numeric value, or NaN if conversion fails.",
    "examples": [
      "toNumber(\"123\") // 123",
      "\"45.67\"|toNumber // 45.67",
      "toNumber(\"abc\") // NaN"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to a number.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The numeric value, or NaN if conversion fails."
    },
    "insertText": "number(${1:input})",
    "aliases": [
      "toNumber",
      "parseFloat"
    ]
  },
  {
    "type": "function",
    "name": "pad",
    "label": "pad",
    "description": "Pads the input string to the specified width.",
    "detail": "JEXL function",
    "documentation": "Pads the input string to the specified width.\n\n**Examples:**\n`pad(\"hello\", 10) // \"hello     \"`\n`pad(\"world\", -8, \"0\") // \"000world\"`\n`\"foo\"|pad(5, \".\") // \"foo..\"`\n\n**Parameters:**\n- `input` (unknown): The input to pad. Non-string inputs are converted to JSON string first.\n- `width` (number): The target width. Positive values pad to the right, negative values pad to the left.\n- `char` (string): The character to use for padding. Defaults to space.\n\n**Returns:** The padded string.",
    "examples": [
      "pad(\"hello\", 10) // \"hello     \"",
      "pad(\"world\", -8, \"0\") // \"000world\"",
      "\"foo\"|pad(5, \".\") // \"foo..\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to pad. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "width",
        "description": "The target width. Positive values pad to the right, negative values pad to the left.",
        "type": "number",
        "optional": false
      },
      {
        "name": "char",
        "description": "The character to use for padding. Defaults to space.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The padded string."
    },
    "insertText": "pad(${1:input}, ${2:width}, ${3:char})"
  },
  {
    "type": "function",
    "name": "parseInteger",
    "label": "parseInteger",
    "description": "Parses a string and returns an integer.",
    "detail": "JEXL function",
    "documentation": "Parses a string and returns an integer.\n\n**Examples:**\n`parseInteger(\"123\") // 123`\n`\"45.67\"|parseInteger // 45`\n`parseInteger(123.89) // 123`\n\n**Parameters:**\n- `input` (unknown): The input to parse as an integer.\n\n**Returns:** The integer value, or NaN if parsing fails.",
    "examples": [
      "parseInteger(\"123\") // 123",
      "\"45.67\"|parseInteger // 45",
      "parseInteger(123.89) // 123"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to parse as an integer.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The integer value, or NaN if parsing fails."
    },
    "insertText": "parseInteger(${1:input})",
    "aliases": [
      "parseInt"
    ]
  },
  {
    "type": "function",
    "name": "pascalCase",
    "label": "pascalCase",
    "description": "Converts the input string to pascal case.",
    "detail": "JEXL function",
    "documentation": "Converts the input string to pascal case.\n\n**Examples:**\n`pascalCase(\"foo bar\") // \"FooBar\"`\n`\"hello-world\"|pascalCase // \"HelloWorld\"`\n`pascalCase(\"HELLO_WORLD\") // \"HelloWorld\"`\n\n**Parameters:**\n- `input` (unknown): The input string to convert to pascal case.\n\n**Returns:** The pascal case string, or empty string if input is not a string.",
    "examples": [
      "pascalCase(\"foo bar\") // \"FooBar\"",
      "\"hello-world\"|pascalCase // \"HelloWorld\"",
      "pascalCase(\"HELLO_WORLD\") // \"HelloWorld\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to convert to pascal case.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The pascal case string, or empty string if input is not a string."
    },
    "insertText": "pascalCase(${1:input})"
  },
  {
    "type": "function",
    "name": "power",
    "label": "power",
    "description": "Returns the value of a number raised to a power.",
    "detail": "JEXL function",
    "documentation": "Returns the value of a number raised to a power.\n\n**Examples:**\n`power(2, 3) // 8`\n`(2)|power(4) // 16`\n`power(9) // 81 (defaults to power of 2)`\n\n**Parameters:**\n- `input` (unknown): The base number.\n- `exponent` (number?): The exponent to raise the base to. Defaults to 2.\n\n**Returns:** The result of base raised to the exponent, or NaN if input cannot be converted to a number.",
    "examples": [
      "power(2, 3) // 8",
      "(2)|power(4) // 16",
      "power(9) // 81 (defaults to power of 2)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The base number.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "exponent",
        "description": "The exponent to raise the base to. Defaults to 2.",
        "type": "number",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "The result of base raised to the exponent, or NaN if input cannot be converted to a number."
    },
    "insertText": "power(${1:input}, ${2:exponent?})"
  },
  {
    "type": "function",
    "name": "randomNumber",
    "label": "random",
    "description": "Generates a random number between 0 (inclusive) and 1 (exclusive).",
    "detail": "JEXL function",
    "documentation": "Generates a random number between 0 (inclusive) and 1 (exclusive).\n\n**Examples:**\n`randomNumber() // 0.123456789 (example output)`\n`randomNumber() // 0.987654321 (different each time)`\n\n**Returns:** A random floating-point number between 0 and 1.",
    "examples": [
      "randomNumber() // 0.123456789 (example output)",
      "randomNumber() // 0.987654321 (different each time)"
    ],
    "parameters": [],
    "returns": {
      "type": "number",
      "description": "A random floating-point number between 0 and 1."
    },
    "insertText": "random()",
    "aliases": [
      "randomNumber"
    ]
  },
  {
    "type": "function",
    "name": "arrayReduce",
    "label": "reduce",
    "description": "Returns an aggregated value derived from applying the function parameter successively to each value in array in combination with the result of the previous application of the function.\r",
    "detail": "JEXL function",
    "documentation": "Returns an aggregated value derived from applying the function parameter successively to each value in array in combination with the result of the previous application of the function.\r\nThe expression must be a valid JEXL expression string, and behaves like an infix operator between each value within the array.\r\nThe relative context provided to the expression is an object with the properties accumulator, value, index and array (the original array).\n\n**Examples:**\n`reduce([1, 2, 3, 4], \"accumulator + value\", 0) // 10`\n`[1, 2, 3]|reduce(\"accumulator * value\", 1) // 6`\n`reduce([\"a\", \"b\", \"c\"], \"accumulator + value\", \"\") // \"abc\"`\n\n**Parameters:**\n- `input` (array): The input array to reduce.\n- `expression` (string): The JEXL expression to apply for each reduction step.\n- `initialValue` (unknown): The initial value for the accumulator.\n\n**Returns:** The final accumulated value, or undefined if input is not an array.",
    "examples": [
      "reduce([1, 2, 3, 4], \"accumulator + value\", 0) // 10",
      "[1, 2, 3]|reduce(\"accumulator * value\", 1) // 6",
      "reduce([\"a\", \"b\", \"c\"], \"accumulator + value\", \"\") // \"abc\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to reduce.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to apply for each reduction step.",
        "type": "string",
        "optional": false
      },
      {
        "name": "initialValue",
        "description": "The initial value for the accumulator.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The final accumulated value, or undefined if input is not an array."
    },
    "insertText": "reduce(${1:input}, ${2:expression}, ${3:initialValue})",
    "aliases": [
      "arrayReduce"
    ]
  },
  {
    "type": "function",
    "name": "replace",
    "label": "replace",
    "description": "Replaces occurrences of a specified string with a replacement string.",
    "detail": "JEXL function",
    "documentation": "Replaces occurrences of a specified string with a replacement string.\n\n**Examples:**\n`replace(\"foo-bar-baz\", \"-\", \"_\") // \"foo_bar_baz\"`\n`\"hello world\"|replace(\"world\", \"there\") // \"hello there\"`\n`replace(\"test test test\", \"test\", \"demo\") // \"demo demo demo\"`\n\n**Parameters:**\n- `input` (unknown): The input string to perform replacements on.\n- `search` (string): The string to search for and replace.\n- `replacement` (string): The string to replace matches with. Defaults to empty string.\n\n**Returns:** The string with replacements made, or undefined if input is not a string.",
    "examples": [
      "replace(\"foo-bar-baz\", \"-\", \"_\") // \"foo_bar_baz\"",
      "\"hello world\"|replace(\"world\", \"there\") // \"hello there\"",
      "replace(\"test test test\", \"test\", \"demo\") // \"demo demo demo\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to perform replacements on.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The string to search for and replace.",
        "type": "string",
        "optional": false
      },
      {
        "name": "replacement",
        "description": "The string to replace matches with. Defaults to empty string.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The string with replacements made, or undefined if input is not a string."
    },
    "insertText": "replace(${1:input}, ${2:search}, ${3:replacement})"
  },
  {
    "type": "function",
    "name": "arrayReverse",
    "label": "reverse",
    "description": "Reverses the elements of an array.",
    "detail": "JEXL function",
    "documentation": "Reverses the elements of an array.\n\n**Examples:**\n`reverse([1, 2, 3]) // [3, 2, 1]`\n`[1, 2, 3]|reverse // [3, 2, 1]`\n`reverse([\"a\", \"b\", \"c\"]) // [\"c\", \"b\", \"a\"]`\n\n**Parameters:**\n- `input` (array): The input values to reverse.\n\n**Returns:** A new array with elements in reverse order, or empty array if no valid input.",
    "examples": [
      "reverse([1, 2, 3]) // [3, 2, 1]",
      "[1, 2, 3]|reverse // [3, 2, 1]",
      "reverse([\"a\", \"b\", \"c\"]) // [\"c\", \"b\", \"a\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input values to reverse.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with elements in reverse order, or empty array if no valid input."
    },
    "insertText": "reverse(${1:input})",
    "aliases": [
      "arrayReverse"
    ]
  },
  {
    "type": "function",
    "name": "round",
    "label": "round",
    "description": "Rounds a number to the nearest integer or to specified decimal places.",
    "detail": "JEXL function",
    "documentation": "Rounds a number to the nearest integer or to specified decimal places.\n\n**Examples:**\n`round(3.7) // 4`\n`round(3.14159, 2) // 3.14`\n`(2.567)|round // 3`\n\n**Parameters:**\n- `input` (unknown): The input number to round.\n- `decimals` (number?): Optional number of decimal places to round to.\n\n**Returns:** The rounded number, or NaN if input cannot be converted to a number.",
    "examples": [
      "round(3.7) // 4",
      "round(3.14159, 2) // 3.14",
      "(2.567)|round // 3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "decimals",
        "description": "Optional number of decimal places to round to.",
        "type": "number",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded number, or NaN if input cannot be converted to a number."
    },
    "insertText": "round(${1:input}, ${2:decimals?})"
  },
  {
    "type": "function",
    "name": "arrayShuffle",
    "label": "shuffle",
    "description": "Shuffles the elements of an array randomly.",
    "detail": "JEXL function",
    "documentation": "Shuffles the elements of an array randomly.\n\n**Examples:**\n`shuffle([1, 2, 3]) // [2, 1, 3] (random order)`\n`[1, 2, 3]|shuffle // [3, 1, 2] (random order)`\n`shuffle([\"a\", \"b\", \"c\"]) // [\"c\", \"a\", \"b\"] (random order)`\n\n**Parameters:**\n- `input` (array): The input array to shuffle.\n\n**Returns:** The same array with elements randomly shuffled, or empty array if input is not an array.",
    "examples": [
      "shuffle([1, 2, 3]) // [2, 1, 3] (random order)",
      "[1, 2, 3]|shuffle // [3, 1, 2] (random order)",
      "shuffle([\"a\", \"b\", \"c\"]) // [\"c\", \"a\", \"b\"] (random order)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to shuffle.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "The same array with elements randomly shuffled, or empty array if input is not an array."
    },
    "insertText": "shuffle(${1:input})",
    "aliases": [
      "arrayShuffle"
    ]
  },
  {
    "type": "function",
    "name": "arraySort",
    "label": "sort",
    "description": "Sorts the elements of an array.",
    "detail": "JEXL function",
    "documentation": "Sorts the elements of an array.\n\n**Examples:**\n`sort([3, 1, 2]) // [1, 2, 3]`\n`[3, 1, 2]|sort // [1, 2, 3]`\n`sort([{age: 30}, {age: 20}], \"age\") // [{age: 20}, {age: 30}]`\n\n**Parameters:**\n- `input` (array): The input array to sort.\n- `expression` (string?): Optional JEXL expression to determine sort value for objects.\n- `descending` (boolean?): Optional flag to sort in descending order.\n\n**Returns:** A new sorted array, or empty array if input is not an array.",
    "examples": [
      "sort([3, 1, 2]) // [1, 2, 3]",
      "[3, 1, 2]|sort // [1, 2, 3]",
      "sort([{age: 30}, {age: 20}], \"age\") // [{age: 20}, {age: 30}]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to sort.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "Optional JEXL expression to determine sort value for objects.",
        "type": "string",
        "optional": true
      },
      {
        "name": "descending",
        "description": "Optional flag to sort in descending order.",
        "type": "boolean",
        "optional": true
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new sorted array, or empty array if input is not an array."
    },
    "insertText": "sort(${1:input}, ${2:expression?}, ${3:descending?})",
    "aliases": [
      "arraySort",
      "order"
    ]
  },
  {
    "type": "function",
    "name": "split",
    "label": "split",
    "description": "Splits the input string into an array of substrings.",
    "detail": "JEXL function",
    "documentation": "Splits the input string into an array of substrings.\n\n**Examples:**\n`split(\"foo,bar,baz\", \",\") // [\"foo\", \"bar\", \"baz\"]`\n`\"one-two-three\"|split(\"-\") // [\"one\", \"two\", \"three\"]`\n`split(\"hello world\", \" \") // [\"hello\", \"world\"]`\n\n**Parameters:**\n- `input` (unknown): The input string to split.\n- `separator` (string): The separator string to split on.\n\n**Returns:** An array of substrings, or empty array if input is not a string.",
    "examples": [
      "split(\"foo,bar,baz\", \",\") // [\"foo\", \"bar\", \"baz\"]",
      "\"one-two-three\"|split(\"-\") // [\"one\", \"two\", \"three\"]",
      "split(\"hello world\", \" \") // [\"hello\", \"world\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to split.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "separator",
        "description": "The separator string to split on.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of substrings, or empty array if input is not a string."
    },
    "insertText": "split(${1:input}, ${2:separator})"
  },
  {
    "type": "function",
    "name": "sqrt",
    "label": "sqrt",
    "description": "Returns the square root of a number.",
    "detail": "JEXL function",
    "documentation": "Returns the square root of a number.\n\n**Examples:**\n`sqrt(16) // 4`\n`(25)|sqrt // 5`\n`sqrt(2) // 1.4142135623730951`\n\n**Parameters:**\n- `input` (unknown): The input number to get the square root of.\n\n**Returns:** The square root of the input, or NaN if input cannot be converted to a number.",
    "examples": [
      "sqrt(16) // 4",
      "(25)|sqrt // 5",
      "sqrt(2) // 1.4142135623730951"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to get the square root of.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The square root of the input, or NaN if input cannot be converted to a number."
    },
    "insertText": "sqrt(${1:input})"
  },
  {
    "type": "function",
    "name": "startsWith",
    "label": "startsWith",
    "description": "Checks if the input string starts with the specified substring.",
    "detail": "JEXL function",
    "documentation": "Checks if the input string starts with the specified substring.\n\n**Examples:**\n`startsWith(\"hello world\", \"hello\") // true`\n`\"foo-bar\"|startsWith(\"foo\") // true`\n`startsWith(\"test\", \"xyz\") // false`\n\n**Parameters:**\n- `input` (unknown): The input string to check.\n- `search` (string): The substring to search for at the beginning.\n\n**Returns:** True if the input starts with the search string, false otherwise.",
    "examples": [
      "startsWith(\"hello world\", \"hello\") // true",
      "\"foo-bar\"|startsWith(\"foo\") // true",
      "startsWith(\"test\", \"xyz\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to check.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The substring to search for at the beginning.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input starts with the search string, false otherwise."
    },
    "insertText": "startsWith(${1:input}, ${2:search})"
  },
  {
    "type": "function",
    "name": "toString",
    "label": "string",
    "description": "Casts the input to a string.",
    "detail": "JEXL function",
    "documentation": "Casts the input to a string.\n\n**Examples:**\n`string(123) // \"123\"`\n`123|string // \"123\"`\n\n**Parameters:**\n- `input` (unknown): The input can be any type.\n- `prettify` (boolean): If true, the output will be pretty-printed.\n\n**Returns:** The input converted to a JSON string representation.",
    "examples": [
      "string(123) // \"123\"",
      "123|string // \"123\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input can be any type.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "prettify",
        "description": "If true, the output will be pretty-printed.",
        "type": "boolean",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The input converted to a JSON string representation."
    },
    "insertText": "string(${1:input}, ${2:prettify})",
    "aliases": [
      "toString"
    ]
  },
  {
    "type": "function",
    "name": "substring",
    "label": "substring",
    "description": "Gets a substring of a string.",
    "detail": "JEXL function",
    "documentation": "Gets a substring of a string.\n\n**Examples:**\n`substring(\"hello world\", 0, 5) // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `start` (number): The starting index of the substring.\n- `length` (number): The length of the substring.\n\n**Returns:** The substring of the input string.",
    "examples": [
      "substring(\"hello world\", 0, 5) // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "start",
        "description": "The starting index of the substring.",
        "type": "number",
        "optional": false
      },
      {
        "name": "length",
        "description": "The length of the substring.",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring of the input string."
    },
    "insertText": "substring(${1:input}, ${2:start}, ${3:length})"
  },
  {
    "type": "function",
    "name": "substringAfter",
    "label": "substringAfter",
    "description": "Returns the substring after the first occurrence of the character sequence chars in str.",
    "detail": "JEXL function",
    "documentation": "Returns the substring after the first occurrence of the character sequence chars in str.\n\n**Examples:**\n`substringAfter(\"hello world\", \" \") // \"world\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `chars` (unknown): The character sequence to search for.\n\n**Returns:** The substring after the first occurrence of the character sequence chars in str.",
    "examples": [
      "substringAfter(\"hello world\", \" \") // \"world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "chars",
        "description": "The character sequence to search for.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring after the first occurrence of the character sequence chars in str."
    },
    "insertText": "substringAfter(${1:input}, ${2:chars})"
  },
  {
    "type": "function",
    "name": "substringBefore",
    "label": "substringBefore",
    "description": "Returns the substring before the first occurrence of the character sequence chars in str.",
    "detail": "JEXL function",
    "documentation": "Returns the substring before the first occurrence of the character sequence chars in str.\n\n**Examples:**\n`substringBefore(\"hello world\", \" \") // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `chars` (unknown): The character sequence to search for.\n\n**Returns:** The substring before the first occurrence of the character sequence chars in str.",
    "examples": [
      "substringBefore(\"hello world\", \" \") // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "chars",
        "description": "The character sequence to search for.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring before the first occurrence of the character sequence chars in str."
    },
    "insertText": "substringBefore(${1:input}, ${2:chars})"
  },
  {
    "type": "function",
    "name": "sum",
    "label": "sum",
    "description": "Calculates the sum of an array of numbers.",
    "detail": "JEXL function",
    "documentation": "Calculates the sum of an array of numbers.\n\n**Examples:**\n`sum([1, 2, 3, 4]) // 10`\n`[1.5, 2.5, 3.0]|sum // 7`\n`sum(1, 2, 3, 4) // 10`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The sum of all numbers, or NaN if input is not an array.",
    "examples": [
      "sum([1, 2, 3, 4]) // 10",
      "[1.5, 2.5, 3.0]|sum // 7",
      "sum(1, 2, 3, 4) // 10"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The sum of all numbers, or NaN if input is not an array."
    },
    "insertText": "sum(${1:input})"
  },
  {
    "type": "function",
    "name": "arrayToObject",
    "label": "toObject",
    "description": "Creates a new object based on key-value pairs or string keys.",
    "detail": "JEXL function",
    "documentation": "Creates a new object based on key-value pairs or string keys.\n\n**Examples:**\n`toObject([[\"name\", \"John\"], [\"age\", 30]]) // {name: \"John\", age: 30}`\n`toObject(\"name\", \"John\") // {name: \"John\"}`\n`toObject([\"key1\", \"key2\"], \"defaultValue\") // {key1: \"defaultValue\", key2: \"defaultValue\"}`\n\n**Parameters:**\n- `input` (unknown): The input string key or array of key-value pairs.\n- `val` (unknown?): Optional default value for string keys or when array elements are strings.\n\n**Returns:** A new object created from the input, or empty object if input is invalid.",
    "examples": [
      "toObject([[\"name\", \"John\"], [\"age\", 30]]) // {name: \"John\", age: 30}",
      "toObject(\"name\", \"John\") // {name: \"John\"}",
      "toObject([\"key1\", \"key2\"], \"defaultValue\") // {key1: \"defaultValue\", key2: \"defaultValue\"}"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string key or array of key-value pairs.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "val",
        "description": "Optional default value for string keys or when array elements are strings.",
        "type": "unknown",
        "optional": true
      }
    ],
    "returns": {
      "type": "any",
      "description": "A new object created from the input, or empty object if input is invalid."
    },
    "insertText": "toObject(${1:input}, ${2:val?})",
    "aliases": [
      "arrayToObject",
      "fromEntries"
    ]
  },
  {
    "type": "function",
    "name": "trim",
    "label": "trim",
    "description": "Trims whitespace from both ends of a string.",
    "detail": "JEXL function",
    "documentation": "Trims whitespace from both ends of a string.\n\n**Examples:**\n`trim(\"  hello  \") // \"hello\"`\n`\"  world  \"|trim // \"world\"`\n`trim(\"__hello__\", \"_\") // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string to trim.\n- `trimChar` (string?): Optional character to trim instead of whitespace.\n\n**Returns:** The trimmed string, or empty string if input is not a string.",
    "examples": [
      "trim(\"  hello  \") // \"hello\"",
      "\"  world  \"|trim // \"world\"",
      "trim(\"__hello__\", \"_\") // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to trim.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "trimChar",
        "description": "Optional character to trim instead of whitespace.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The trimmed string, or empty string if input is not a string."
    },
    "insertText": "trim(${1:input}, ${2:trimChar?})"
  },
  {
    "type": "function",
    "name": "uppercase",
    "label": "uppercase",
    "description": "Converts the input string to uppercase.",
    "detail": "JEXL function",
    "documentation": "Converts the input string to uppercase.\n\n**Examples:**\n`uppercase(\"hello\") // \"HELLO\"`\n`\"hello world\"|uppercase // \"HELLO WORLD\"`\n\n**Parameters:**\n- `input` (unknown): The input to convert to uppercase. Non-string inputs are converted to JSON string first.\n\n**Returns:** The uppercase string.",
    "examples": [
      "uppercase(\"hello\") // \"HELLO\"",
      "\"hello world\"|uppercase // \"HELLO WORLD\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to uppercase. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The uppercase string."
    },
    "insertText": "uppercase(${1:input})",
    "aliases": [
      "upper"
    ]
  },
  {
    "type": "function",
    "name": "uuid",
    "label": "uuid",
    "description": "Generates a new UUID (Universally Unique Identifier).",
    "detail": "JEXL function",
    "documentation": "Generates a new UUID (Universally Unique Identifier).\n\n**Examples:**\n`uuid() // \"123e4567-e89b-12d3-a456-426614174000\"`\n`uuid() // \"987fcdeb-51a2-43d7-b123-456789abcdef\" (different each time)`\n\n**Returns:** A new UUID v4 string.",
    "examples": [
      "uuid() // \"123e4567-e89b-12d3-a456-426614174000\"",
      "uuid() // \"987fcdeb-51a2-43d7-b123-456789abcdef\" (different each time)"
    ],
    "parameters": [],
    "returns": {
      "type": "string",
      "description": "A new UUID v4 string."
    },
    "insertText": "uuid()",
    "aliases": [
      "uid"
    ]
  },
  {
    "type": "function",
    "name": "objectValues",
    "label": "values",
    "description": "Returns the values of an object as an array.",
    "detail": "JEXL function",
    "documentation": "Returns the values of an object as an array.\n\n**Examples:**\n`values({name: \"John\", age: 30}) // [\"John\", 30]`\n`{a: 1, b: 2}|values // [1, 2]`\n`values({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get values from.\n\n**Returns:** An array of object values, or undefined if input is not an object.",
    "examples": [
      "values({name: \"John\", age: 30}) // [\"John\", 30]",
      "{a: 1, b: 2}|values // [1, 2]",
      "values({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get values from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of object values, or undefined if input is not an object."
    },
    "insertText": "values(${1:input})",
    "aliases": [
      "objectValues"
    ]
  },
  {
    "type": "transform",
    "name": "absoluteValue",
    "label": "abs",
    "description": "Returns the absolute value of a number.",
    "detail": "JEXL transform",
    "documentation": "Returns the absolute value of a number.\n\n**Examples:**\n`absoluteValue(-5) // 5`\n`(-10)|absoluteValue // 10`\n`absoluteValue(3.14) // 3.14`\n\n**Parameters:**\n- `input` (unknown): The input number to get the absolute value of.\n\n**Returns:** The absolute value, or NaN if input cannot be converted to a number.",
    "examples": [
      "absoluteValue(-5) // 5",
      "(-10)|absoluteValue // 10",
      "absoluteValue(3.14) // 3.14"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to get the absolute value of.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The absolute value, or NaN if input cannot be converted to a number."
    },
    "insertText": "abs",
    "aliases": [
      "absoluteValue",
      "abs"
    ]
  },
  {
    "type": "transform",
    "name": "arrayEvery",
    "label": "all",
    "description": "Checks whether the provided array has all elements that match the specified expression.\r",
    "detail": "JEXL transform",
    "documentation": "Checks whether the provided array has all elements that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`every([2, 4, 6], \"value % 2 == 0\") // true`\n`[{age: 25}, {age: 35}]|every(\"value.age > 20\") // true`\n`every([1, 2, 3], \"value > 2\") // false`\n\n**Parameters:**\n- `input` (array): The input array to test.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** True if all elements match the expression, false otherwise or if input is not an array.",
    "examples": [
      "every([2, 4, 6], \"value % 2 == 0\") // true",
      "[{age: 25}, {age: 35}]|every(\"value.age > 20\") // true",
      "every([1, 2, 3], \"value > 2\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to test.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if all elements match the expression, false otherwise or if input is not an array."
    },
    "insertText": "all(${1:expression})",
    "aliases": [
      "arrayEvery",
      "every",
      "all"
    ]
  },
  {
    "type": "transform",
    "name": "arrayAny",
    "label": "any",
    "description": "Checks whether the provided array has any elements that match the specified expression.\r",
    "detail": "JEXL transform",
    "documentation": "Checks whether the provided array has any elements that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`any([1, 2, 3], \"value > 2\") // true`\n`[{age: 25}, {age: 35}]|any(\"value.age > 30\") // true`\n`any([1, 2, 3], \"value > 5\") // false`\n\n**Parameters:**\n- `input` (array): The input array to test.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** True if any element matches the expression, false otherwise or if input is not an array.",
    "examples": [
      "any([1, 2, 3], \"value > 2\") // true",
      "[{age: 25}, {age: 35}]|any(\"value.age > 30\") // true",
      "any([1, 2, 3], \"value > 5\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to test.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if any element matches the expression, false otherwise or if input is not an array."
    },
    "insertText": "any(${1:expression})",
    "aliases": [
      "arrayAny",
      "some",
      "any"
    ]
  },
  {
    "type": "transform",
    "name": "arrayAppend",
    "label": "append",
    "description": "Appends elements to an array.",
    "detail": "JEXL transform",
    "documentation": "Appends elements to an array.\n\n**Examples:**\n`append([1, 2], 3) // [1, 2, 3]`\n`[1, 2]|append(3, 4) // [1, 2, 3, 4]`\n`append([], 1, 2, 3) // [1, 2, 3]`\n\n**Parameters:**\n- `input` (array): The input values to append to an array.\n\n**Returns:** A new array with all inputs flattened and appended, or empty array if no valid input.",
    "examples": [
      "append([1, 2], 3) // [1, 2, 3]",
      "[1, 2]|append(3, 4) // [1, 2, 3, 4]",
      "append([], 1, 2, 3) // [1, 2, 3]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input values to append to an array.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with all inputs flattened and appended, or empty array if no valid input."
    },
    "insertText": "append",
    "aliases": [
      "arrayAppend",
      "concat",
      "append"
    ]
  },
  {
    "type": "transform",
    "name": "average",
    "label": "average",
    "description": "Calculates the average of an array of numbers.",
    "detail": "JEXL transform",
    "documentation": "Calculates the average of an array of numbers.\n\n**Examples:**\n`average([1, 2, 3, 4]) // 2.5`\n`[10, 20, 30]|average // 20`\n`average(1, 2, 3, 4) // 2.5`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The average value, or NaN if input is not an array.",
    "examples": [
      "average([1, 2, 3, 4]) // 2.5",
      "[10, 20, 30]|average // 20",
      "average(1, 2, 3, 4) // 2.5"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The average value, or NaN if input is not an array."
    },
    "insertText": "average",
    "aliases": [
      "avg"
    ]
  },
  {
    "type": "transform",
    "name": "base64Decode",
    "label": "base64Decode",
    "description": "Decodes a Base64 encoded string.",
    "detail": "JEXL transform",
    "documentation": "Decodes a Base64 encoded string.\n\n**Examples:**\n`base64Decode(\"aGVsbG8=\") // \"hello\"`\n`\"aGVsbG8gd29ybGQ=\"|base64Decode // \"hello world\"`\n`base64Decode(\"dGVzdA==\") // \"test\"`\n\n**Parameters:**\n- `input` (unknown): The Base64 encoded string to decode.\n\n**Returns:** The decoded string, or empty string if input is not a string.",
    "examples": [
      "base64Decode(\"aGVsbG8=\") // \"hello\"",
      "\"aGVsbG8gd29ybGQ=\"|base64Decode // \"hello world\"",
      "base64Decode(\"dGVzdA==\") // \"test\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The Base64 encoded string to decode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The decoded string, or empty string if input is not a string."
    },
    "insertText": "base64Decode"
  },
  {
    "type": "transform",
    "name": "base64Encode",
    "label": "base64Encode",
    "description": "Encodes a string to Base64.",
    "detail": "JEXL transform",
    "documentation": "Encodes a string to Base64.\n\n**Examples:**\n`base64Encode(\"hello\") // \"aGVsbG8=\"`\n`\"hello world\"|base64Encode // \"aGVsbG8gd29ybGQ=\"`\n`base64Encode(\"test\") // \"dGVzdA==\"`\n\n**Parameters:**\n- `input` (unknown): The input string to encode.\n\n**Returns:** The Base64 encoded string, or empty string if input is not a string or encoding fails.",
    "examples": [
      "base64Encode(\"hello\") // \"aGVsbG8=\"",
      "\"hello world\"|base64Encode // \"aGVsbG8gd29ybGQ=\"",
      "base64Encode(\"test\") // \"dGVzdA==\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to encode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The Base64 encoded string, or empty string if input is not a string or encoding fails."
    },
    "insertText": "base64Encode"
  },
  {
    "type": "transform",
    "name": "toBoolean",
    "label": "boolean",
    "description": "Converts the input to a boolean.",
    "detail": "JEXL transform",
    "documentation": "Converts the input to a boolean.\n\n**Examples:**\n`toBoolean(\"true\") // true`\n`\"false\"|toBoolean // false`\n`toBoolean(1) // true`\n\n**Parameters:**\n- `input` (unknown): The input to convert to a boolean.\n\n**Returns:** The boolean value, or undefined for ambiguous string values.",
    "examples": [
      "toBoolean(\"true\") // true",
      "\"false\"|toBoolean // false",
      "toBoolean(1) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to a boolean.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "The boolean value, or undefined for ambiguous string values."
    },
    "insertText": "boolean",
    "aliases": [
      "toBoolean",
      "bool",
      "boolean",
      "toBool"
    ]
  },
  {
    "type": "transform",
    "name": "camelCase",
    "label": "camelCase",
    "description": "Converts the input string to camel case.",
    "detail": "JEXL transform",
    "documentation": "Converts the input string to camel case.\n\n**Examples:**\n`camelCase(\"foo bar\") // \"fooBar\"`\n`\"hello-world\"|camelCase // \"helloWorld\"`\n`camelCase(\"HELLO_WORLD\") // \"helloWorld\"`\n\n**Parameters:**\n- `input` (unknown): The input string to convert to camel case.\n\n**Returns:** The camel case string, or empty string if input is not a string.",
    "examples": [
      "camelCase(\"foo bar\") // \"fooBar\"",
      "\"hello-world\"|camelCase // \"helloWorld\"",
      "camelCase(\"HELLO_WORLD\") // \"helloWorld\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to convert to camel case.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The camel case string, or empty string if input is not a string."
    },
    "insertText": "camelCase",
    "aliases": [
      "camelcase",
      "toCamelCase"
    ]
  },
  {
    "type": "transform",
    "name": "switchCase",
    "label": "case",
    "description": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.",
    "detail": "JEXL transform",
    "documentation": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\n\n**Examples:**\n`switch(expression, case1, result1, case2, result2, ..., default)`\n\n**Parameters:**\n- `args` (array): The arguments array where the first element is the expression to evaluate, followed by pairs of case and result, and optionally a default value.\n\n**Returns:** The result of the first case whose predicate is satisfied, or the default value if no case is satisfied.",
    "examples": [
      "switch(expression, case1, result1, case2, result2, ..., default)"
    ],
    "parameters": [
      {
        "name": "args",
        "description": "The arguments array where the first element is the expression to evaluate, followed by pairs of case and result, and optionally a default value.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The result of the first case whose predicate is satisfied, or the default value if no case is satisfied."
    },
    "insertText": "case",
    "aliases": [
      "switchCase",
      "switch",
      "case"
    ]
  },
  {
    "type": "transform",
    "name": "ceil",
    "label": "ceil",
    "description": "Rounds a number up to the nearest integer.",
    "detail": "JEXL transform",
    "documentation": "Rounds a number up to the nearest integer.\n\n**Examples:**\n`ceil(3.2) // 4`\n`(3.14)|ceil // 4`\n`ceil(-2.8) // -2`\n\n**Parameters:**\n- `input` (unknown): The input number to round up.\n\n**Returns:** The rounded up integer, or NaN if input cannot be converted to a number.",
    "examples": [
      "ceil(3.2) // 4",
      "(3.14)|ceil // 4",
      "ceil(-2.8) // -2"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round up.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded up integer, or NaN if input cannot be converted to a number."
    },
    "insertText": "ceil"
  },
  {
    "type": "transform",
    "name": "contains",
    "label": "contains",
    "description": "Checks if the input string or array contains the specified value.",
    "detail": "JEXL transform",
    "documentation": "Checks if the input string or array contains the specified value.\n\n**Examples:**\n`contains(\"hello world\", \"world\") // true`\n`\"foo-bar\"|contains(\"bar\") // true`\n`contains([1, 2, 3], 2) // true`\n\n**Parameters:**\n- `input` (unknown): The input string or array to search in.\n- `search` (string): The value to search for.\n\n**Returns:** True if the input contains the search value, false otherwise.",
    "examples": [
      "contains(\"hello world\", \"world\") // true",
      "\"foo-bar\"|contains(\"bar\") // true",
      "contains([1, 2, 3], 2) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string or array to search in.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The value to search for.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input contains the search value, false otherwise."
    },
    "insertText": "contains(${1:search})",
    "aliases": [
      "includes"
    ]
  },
  {
    "type": "transform",
    "name": "dateTimeAdd",
    "label": "dateTimeAdd",
    "description": "Adds a time range to a date and time in the ISO 8601 format.",
    "detail": "JEXL transform",
    "documentation": "Adds a time range to a date and time in the ISO 8601 format.\n\n**Examples:**\n`dateTimeAdd(\"2023-12-25T10:30:00.000Z\", \"day\", 1) // \"2023-12-26T10:30:00.000Z\"`\n`now()|dateTimeAdd(\"hour\", -2) // Two hours ago`\n`dateTimeAdd(\"2023-01-01T00:00:00.000Z\", \"month\", 3) // \"2023-04-01T00:00:00.000Z\"`\n\n**Parameters:**\n- `input` (string): The input date and time string in ISO 8601 format.\n- `unit` (string): The time unit to add (\"day\", \"hour\", \"minute\", \"second\", \"month\", \"year\", etc.).\n- `value` (number): The amount to add (can be negative to subtract).\n\n**Returns:** The new date and time as an ISO 8601 string.",
    "examples": [
      "dateTimeAdd(\"2023-12-25T10:30:00.000Z\", \"day\", 1) // \"2023-12-26T10:30:00.000Z\"",
      "now()|dateTimeAdd(\"hour\", -2) // Two hours ago",
      "dateTimeAdd(\"2023-01-01T00:00:00.000Z\", \"month\", 3) // \"2023-04-01T00:00:00.000Z\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input date and time string in ISO 8601 format.",
        "type": "string",
        "optional": false
      },
      {
        "name": "unit",
        "description": "The time unit to add (\"day\", \"hour\", \"minute\", \"second\", \"month\", \"year\", etc.).",
        "type": "string",
        "optional": false
      },
      {
        "name": "value",
        "description": "The amount to add (can be negative to subtract).",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The new date and time as an ISO 8601 string."
    },
    "insertText": "dateTimeAdd(${1:unit}, ${2:value})"
  },
  {
    "type": "transform",
    "name": "dateTimeFormat",
    "label": "dateTimeFormat",
    "description": "Converts a date and time to a provided format.",
    "detail": "JEXL transform",
    "documentation": "Converts a date and time to a provided format.\n\n**Examples:**\n`dateTimeFormat(datetime, format)`\n`datetime|dateTimeFormat(format)`\n\n**Parameters:**\n- `input` (union): The input date and time, either as a string or number.\n- `format` (string): The format to convert the date and time to.\n\n**Returns:** The date and time in the specified format.",
    "examples": [
      "dateTimeFormat(datetime, format)",
      "datetime|dateTimeFormat(format)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input date and time, either as a string or number.",
        "type": "union",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format to convert the date and time to.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The date and time in the specified format."
    },
    "insertText": "dateTimeFormat(${1:format})"
  },
  {
    "type": "transform",
    "name": "dateTimeToMillis",
    "label": "dateTimeToMillis",
    "description": "Parses the date and time in the ISO 8601 format and returns the number of milliseconds since the Unix epoch.",
    "detail": "JEXL transform",
    "documentation": "Parses the date and time in the ISO 8601 format and returns the number of milliseconds since the Unix epoch.\n\n**Examples:**\n`dateTimeToMillis(\"2023-12-25T10:30:00.000Z\") // 1703505000000`\n`\"2023-01-01T00:00:00.000Z\"|dateTimeToMillis // 1672531200000`\n`dateTimeToMillis(\"2023-12-25\") // 1703462400000`\n\n**Parameters:**\n- `input` (string): The date and time string to parse.\n\n**Returns:** The timestamp in milliseconds since Unix epoch.",
    "examples": [
      "dateTimeToMillis(\"2023-12-25T10:30:00.000Z\") // 1703505000000",
      "\"2023-01-01T00:00:00.000Z\"|dateTimeToMillis // 1672531200000",
      "dateTimeToMillis(\"2023-12-25\") // 1703462400000"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The date and time string to parse.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The timestamp in milliseconds since Unix epoch."
    },
    "insertText": "dateTimeToMillis",
    "aliases": [
      "toMillis"
    ]
  },
  {
    "type": "transform",
    "name": "arrayDistinct",
    "label": "distinct",
    "description": "Returns a new array with duplicate elements removed.",
    "detail": "JEXL transform",
    "documentation": "Returns a new array with duplicate elements removed.\n\n**Examples:**\n`distinct([1, 2, 2, 3, 1]) // [1, 2, 3]`\n`[1, 2, 2, 3]|distinct // [1, 2, 3]`\n`distinct([\"a\", \"b\", \"a\", \"c\"]) // [\"a\", \"b\", \"c\"]`\n\n**Parameters:**\n- `input` (array): The input array to remove duplicates from.\n\n**Returns:** A new array with duplicates removed, or empty array if input is not an array.",
    "examples": [
      "distinct([1, 2, 2, 3, 1]) // [1, 2, 3]",
      "[1, 2, 2, 3]|distinct // [1, 2, 3]",
      "distinct([\"a\", \"b\", \"a\", \"c\"]) // [\"a\", \"b\", \"c\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to remove duplicates from.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with duplicates removed, or empty array if input is not an array."
    },
    "insertText": "distinct",
    "aliases": [
      "arrayDistinct",
      "distinct"
    ]
  },
  {
    "type": "transform",
    "name": "endsWith",
    "label": "endsWith",
    "description": "Checks if the input string ends with the specified substring.",
    "detail": "JEXL transform",
    "documentation": "Checks if the input string ends with the specified substring.\n\n**Examples:**\n`endsWith(\"hello world\", \"world\") // true`\n`\"foo-bar\"|endsWith(\"bar\") // true`\n`endsWith(\"test\", \"xyz\") // false`\n\n**Parameters:**\n- `input` (unknown): The input string to check.\n- `search` (string): The substring to search for at the end.\n\n**Returns:** True if the input ends with the search string, false otherwise.",
    "examples": [
      "endsWith(\"hello world\", \"world\") // true",
      "\"foo-bar\"|endsWith(\"bar\") // true",
      "endsWith(\"test\", \"xyz\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to check.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The substring to search for at the end.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input ends with the search string, false otherwise."
    },
    "insertText": "endsWith(${1:search})"
  },
  {
    "type": "transform",
    "name": "objectEntries",
    "label": "entries",
    "description": "Returns an array of key-value pairs from the input object.",
    "detail": "JEXL transform",
    "documentation": "Returns an array of key-value pairs from the input object.\n\n**Examples:**\n`entries({name: \"John\", age: 30}) // [[\"name\", \"John\"], [\"age\", 30]]`\n`{a: 1, b: 2}|entries // [[\"a\", 1], [\"b\", 2]]`\n`entries({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get entries from.\n\n**Returns:** An array of [key, value] pairs, or undefined if input is not an object.",
    "examples": [
      "entries({name: \"John\", age: 30}) // [[\"name\", \"John\"], [\"age\", 30]]",
      "{a: 1, b: 2}|entries // [[\"a\", 1], [\"b\", 2]]",
      "entries({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get entries from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of [key, value] pairs, or undefined if input is not an object."
    },
    "insertText": "entries",
    "aliases": [
      "objectEntries",
      "entries"
    ]
  },
  {
    "type": "transform",
    "name": "_eval",
    "label": "eval",
    "description": "Evaluates a JEXL expression and returns the result.\r",
    "detail": "JEXL transform",
    "documentation": "Evaluates a JEXL expression and returns the result.\r\nIf only one argument is provided, it is expected that the first argument is a JEXL expression.\r\nIf two arguments are provided, the first argument is the context (must be an object) and the second argument is the JEXL expression.\r\nThe expression uses the default JEXL extended grammar and can't use any custom defined functions or transforms.\n\n**Examples:**\n`_eval(\"1 + 2\") // 3`\n`_eval({x: 5, y: 10}, \"x + y\") // 15`\n`\"2 * 3\"|_eval // 6`\n\n**Parameters:**\n- `input` (unknown): Either a JEXL expression string or a context object.\n- `expression` (string): Optional JEXL expression when first argument is context.\n\n**Returns:** The result of evaluating the expression, or undefined if evaluation fails.",
    "examples": [
      "_eval(\"1 + 2\") // 3",
      "_eval({x: 5, y: 10}, \"x + y\") // 15",
      "\"2 * 3\"|_eval // 6"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "Either a JEXL expression string or a context object.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "expression",
        "description": "Optional JEXL expression when first argument is context.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "any",
      "description": "The result of evaluating the expression, or undefined if evaluation fails."
    },
    "insertText": "eval(${1:expression})",
    "aliases": [
      "_eval",
      "eval"
    ]
  },
  {
    "type": "transform",
    "name": "arrayFilter",
    "label": "filter",
    "description": "Returns a new array with the elements of the input array that match the specified expression.\r",
    "detail": "JEXL transform",
    "documentation": "Returns a new array with the elements of the input array that match the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`filter([1, 2, 3, 4], \"value > 2\") // [3, 4]`\n`[{age: 25}, {age: 35}]|filter(\"value.age > 30\") // [{age: 35}]`\n`filter([1, 2, 3, 4], \"value % 2 == 0\") // [2, 4]`\n\n**Parameters:**\n- `input` (array): The input array to filter.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** A new array containing only elements that match the expression, or empty array if input is not an array.",
    "examples": [
      "filter([1, 2, 3, 4], \"value > 2\") // [3, 4]",
      "[{age: 25}, {age: 35}]|filter(\"value.age > 30\") // [{age: 35}]",
      "filter([1, 2, 3, 4], \"value % 2 == 0\") // [2, 4]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to filter.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array containing only elements that match the expression, or empty array if input is not an array."
    },
    "insertText": "filter(${1:expression})",
    "aliases": [
      "arrayFilter",
      "filter"
    ]
  },
  {
    "type": "transform",
    "name": "arrayFind",
    "label": "find",
    "description": "Finds the first element in an array that matches the specified expression.\r",
    "detail": "JEXL transform",
    "documentation": "Finds the first element in an array that matches the specified expression.\r\nThe expression must be a valid JEXL expression string, and is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`find([1, 2, 3, 4], \"value > 2\") // 3`\n`[{name: \"John\"}, {name: \"Jane\"}]|find(\"value.name == 'Jane'\") // {name: \"Jane\"}`\n`find([1, 2, 3], \"value > 5\") // undefined`\n\n**Parameters:**\n- `input` (array): The input array to search.\n- `expression` (string): The JEXL expression to test against each element.\n\n**Returns:** The first element that matches the expression, or undefined if no match found or input is not an array.",
    "examples": [
      "find([1, 2, 3, 4], \"value > 2\") // 3",
      "[{name: \"John\"}, {name: \"Jane\"}]|find(\"value.name == 'Jane'\") // {name: \"Jane\"}",
      "find([1, 2, 3], \"value > 5\") // undefined"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to search.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to test against each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The first element that matches the expression, or undefined if no match found or input is not an array."
    },
    "insertText": "find(${1:expression})",
    "aliases": [
      "arrayFind",
      "find"
    ]
  },
  {
    "type": "transform",
    "name": "arrayFindIndex",
    "label": "findIndex",
    "description": "Finds the index of the first element in the input array that satisfies the given Jexl expression.",
    "detail": "JEXL transform",
    "documentation": "Finds the index of the first element in the input array that satisfies the given Jexl expression.\n\n**Examples:**\n`[1, 2, 3, 4]|findIndex('value > 2'); // returns 2`\n\n**Parameters:**\n- `input` (array): The array to search through.\n- `expression` (string): A Jexl expression string to evaluate for each element. The expression has access to \n\n**Returns:** The index of the first matching element, or ",
    "examples": [
      "[1, 2, 3, 4]|findIndex('value > 2'); // returns 2"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The array to search through.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "A Jexl expression string to evaluate for each element. The expression has access to ",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The index of the first matching element, or "
    },
    "insertText": "findIndex(${1:expression})",
    "aliases": [
      "arrayFindIndex",
      "findIndex"
    ]
  },
  {
    "type": "transform",
    "name": "floor",
    "label": "floor",
    "description": "Rounds a number down to the nearest integer.",
    "detail": "JEXL transform",
    "documentation": "Rounds a number down to the nearest integer.\n\n**Examples:**\n`floor(3.7) // 3`\n`(3.14)|floor // 3`\n`floor(-2.8) // -3`\n\n**Parameters:**\n- `input` (unknown): The input number to round down.\n\n**Returns:** The rounded down integer, or NaN if input cannot be converted to a number.",
    "examples": [
      "floor(3.7) // 3",
      "(3.14)|floor // 3",
      "floor(-2.8) // -3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round down.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded down integer, or NaN if input cannot be converted to a number."
    },
    "insertText": "floor"
  },
  {
    "type": "transform",
    "name": "formatBase",
    "label": "formatBase",
    "description": "Formats a number as a string in the specified base.",
    "detail": "JEXL transform",
    "documentation": "Formats a number as a string in the specified base.\n\n**Examples:**\n`formatBase(255, 16) // \"ff\"`\n`(10)|formatBase(2) // \"1010\"`\n`formatBase(64, 8) // \"100\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `base` (number): The numeric base to convert to (2-36).\n\n**Returns:** The number formatted in the specified base, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatBase(255, 16) // \"ff\"",
      "(10)|formatBase(2) // \"1010\"",
      "formatBase(64, 8) // \"100\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "base",
        "description": "The numeric base to convert to (2-36).",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The number formatted in the specified base, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatBase(${1:base})"
  },
  {
    "type": "transform",
    "name": "formatInteger",
    "label": "formatInteger",
    "description": "Formats a number as an integer with zero padding.",
    "detail": "JEXL transform",
    "documentation": "Formats a number as an integer with zero padding.\n\n**Examples:**\n`formatInteger(42, \"000\") // \"042\"`\n`(7)|formatInteger(\"0000\") // \"0007\"`\n`formatInteger(123, \"00\") // \"123\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `format` (string): The format string indicating the minimum number of digits.\n\n**Returns:** The zero-padded integer string, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatInteger(42, \"000\") // \"042\"",
      "(7)|formatInteger(\"0000\") // \"0007\"",
      "formatInteger(123, \"00\") // \"123\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format string indicating the minimum number of digits.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The zero-padded integer string, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatInteger(${1:format})"
  },
  {
    "type": "transform",
    "name": "formatNumber",
    "label": "formatNumber",
    "description": "Formats a number to a decimal representation as specified by the format string.",
    "detail": "JEXL transform",
    "documentation": "Formats a number to a decimal representation as specified by the format string.\n\n**Examples:**\n`formatNumber(1234.567, \"#,##0.00\") // \"1,234.57\"`\n`(1000)|formatNumber(\"0.00\") // \"1000.00\"`\n`formatNumber(42, \"#,###\") // \"42\"`\n\n**Parameters:**\n- `input` (unknown): The input number to format.\n- `format` (string): The format string specifying decimal places and grouping.\n\n**Returns:** The formatted number string, or empty string if input cannot be converted to a number.",
    "examples": [
      "formatNumber(1234.567, \"#,##0.00\") // \"1,234.57\"",
      "(1000)|formatNumber(\"0.00\") // \"1000.00\"",
      "formatNumber(42, \"#,###\") // \"42\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to format.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "format",
        "description": "The format string specifying decimal places and grouping.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The formatted number string, or empty string if input cannot be converted to a number."
    },
    "insertText": "formatNumber(${1:format})"
  },
  {
    "type": "transform",
    "name": "formUrlEncoded",
    "label": "formUrlEncoded",
    "description": "Encodes a string or object to URI component format.",
    "detail": "JEXL transform",
    "documentation": "Encodes a string or object to URI component format.\n\n**Examples:**\n`formUrlEncoded(\"hello world\") // \"hello%20world\"`\n`formUrlEncoded({name: \"John\", age: 30}) // \"name=John&age=30\"`\n`\"hello & world\"|formUrlEncoded // \"hello%20%26%20world\"`\n\n**Parameters:**\n- `input` (unknown): The input string or object to encode.\n\n**Returns:** The URL encoded string, or empty string if input is not a string or object.",
    "examples": [
      "formUrlEncoded(\"hello world\") // \"hello%20world\"",
      "formUrlEncoded({name: \"John\", age: 30}) // \"name=John&age=30\"",
      "\"hello & world\"|formUrlEncoded // \"hello%20%26%20world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string or object to encode.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The URL encoded string, or empty string if input is not a string or object."
    },
    "insertText": "formUrlEncoded"
  },
  {
    "type": "transform",
    "name": "arrayJoin",
    "label": "join",
    "description": "Joins elements of an array into a string.",
    "detail": "JEXL transform",
    "documentation": "Joins elements of an array into a string.\n\n**Examples:**\n`arrayJoin([\"foo\", \"bar\", \"baz\"], \",\") // \"foo,bar,baz\"`\n`[\"one\", \"two\", \"three\"]|arrayJoin(\"-\") // \"one-two-three\"`\n`arrayJoin([1, 2, 3]) // \"1,2,3\"`\n\n**Parameters:**\n- `input` (unknown): The input array to join.\n- `separator` (string?): The separator string to use between elements. Defaults to comma.\n\n**Returns:** The joined string, or undefined if input is not an array.",
    "examples": [
      "arrayJoin([\"foo\", \"bar\", \"baz\"], \",\") // \"foo,bar,baz\"",
      "[\"one\", \"two\", \"three\"]|arrayJoin(\"-\") // \"one-two-three\"",
      "arrayJoin([1, 2, 3]) // \"1,2,3\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to join.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "separator",
        "description": "The separator string to use between elements. Defaults to comma.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The joined string, or undefined if input is not an array."
    },
    "insertText": "join(${1:separator?})",
    "aliases": [
      "arrayJoin",
      "join"
    ]
  },
  {
    "type": "transform",
    "name": "toJson",
    "label": "json",
    "description": "Parses the string and returns a JSON object.",
    "detail": "JEXL transform",
    "documentation": "Parses the string and returns a JSON object.\n\n**Examples:**\n`toJson('{\"key\": \"value\"}') // { key: \"value\" }`\n`'{\"name\": \"John\", \"age\": 30}'|toJson // { name: \"John\", age: 30 }`\n\n**Parameters:**\n- `input` (string): The JSON string to parse.\n\n**Returns:** The parsed JSON object or value.",
    "examples": [
      "toJson('{\"key\": \"value\"}') // { key: \"value\" }",
      "'{\"name\": \"John\", \"age\": 30}'|toJson // { name: \"John\", age: 30 }"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The JSON string to parse.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "any",
      "description": "The parsed JSON object or value."
    },
    "insertText": "json",
    "aliases": [
      "toJson",
      "parseJson"
    ]
  },
  {
    "type": "transform",
    "name": "objectKeys",
    "label": "keys",
    "description": "Returns the keys of an object as an array.",
    "detail": "JEXL transform",
    "documentation": "Returns the keys of an object as an array.\n\n**Examples:**\n`keys({name: \"John\", age: 30}) // [\"name\", \"age\"]`\n`{a: 1, b: 2}|keys // [\"a\", \"b\"]`\n`keys({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get keys from.\n\n**Returns:** An array of object keys, or undefined if input is not an object.",
    "examples": [
      "keys({name: \"John\", age: 30}) // [\"name\", \"age\"]",
      "{a: 1, b: 2}|keys // [\"a\", \"b\"]",
      "keys({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get keys from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of object keys, or undefined if input is not an object."
    },
    "insertText": "keys",
    "aliases": [
      "objectKeys",
      "keys"
    ]
  },
  {
    "type": "transform",
    "name": "length",
    "label": "length",
    "description": "Returns the number of characters in a string, or the length of an array.",
    "detail": "JEXL transform",
    "documentation": "Returns the number of characters in a string, or the length of an array.\n\n**Examples:**\n`length(\"hello\") // 5`\n`length([1, 2, 3]) // 3`\n\n**Parameters:**\n- `input` (unknown): The input can be a string, an array, or an object.\n\n**Returns:** The number of characters in a string, or the length of an array.",
    "examples": [
      "length(\"hello\") // 5",
      "length([1, 2, 3]) // 3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input can be a string, an array, or an object.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The number of characters in a string, or the length of an array."
    },
    "insertText": "length",
    "aliases": [
      "count",
      "size"
    ]
  },
  {
    "type": "transform",
    "name": "lowercase",
    "label": "lowercase",
    "description": "Converts the input string to lowercase.",
    "detail": "JEXL transform",
    "documentation": "Converts the input string to lowercase.\n\n**Examples:**\n`lowercase(\"HELLO\") // \"hello\"`\n`\"HELLO WORLD\"|lowercase // \"hello world\"`\n\n**Parameters:**\n- `input` (unknown): The input to convert to lowercase. Non-string inputs are converted to JSON string first.\n\n**Returns:** The lowercase string.",
    "examples": [
      "lowercase(\"HELLO\") // \"hello\"",
      "\"HELLO WORLD\"|lowercase // \"hello world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to lowercase. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The lowercase string."
    },
    "insertText": "lowercase",
    "aliases": [
      "lower"
    ]
  },
  {
    "type": "transform",
    "name": "arrayMap",
    "label": "map",
    "description": "Returns an array containing the results of applying the expression parameter to each value in the array parameter.\r",
    "detail": "JEXL transform",
    "documentation": "Returns an array containing the results of applying the expression parameter to each value in the array parameter.\r\nThe expression must be a valid JEXL expression string, which is applied to each element of the array.\r\nThe relative context provided to the expression is an object with the properties value, index and array (the original array).\n\n**Examples:**\n`map([1, 2, 3], \"value * 2\") // [2, 4, 6]`\n`[{name: \"John\"}, {name: \"Jane\"}]|map(\"value.name\") // [\"John\", \"Jane\"]`\n`map([1, 2, 3], \"value + index\") // [1, 3, 5]`\n\n**Parameters:**\n- `input` (array): The input array to transform.\n- `expression` (string): The JEXL expression to apply to each element.\n\n**Returns:** A new array with transformed elements, or undefined if input is not an array.",
    "examples": [
      "map([1, 2, 3], \"value * 2\") // [2, 4, 6]",
      "[{name: \"John\"}, {name: \"Jane\"}]|map(\"value.name\") // [\"John\", \"Jane\"]",
      "map([1, 2, 3], \"value + index\") // [1, 3, 5]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to transform.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to apply to each element.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with transformed elements, or undefined if input is not an array."
    },
    "insertText": "map(${1:expression})",
    "aliases": [
      "arrayMap",
      "map"
    ]
  },
  {
    "type": "transform",
    "name": "mapField",
    "label": "mapField",
    "description": "Returns a new array with elements transformed by extracting a specific field.",
    "detail": "JEXL transform",
    "documentation": "Returns a new array with elements transformed by extracting a specific field.\n\n**Examples:**\n`mapField([{name: \"John\"}, {name: \"Jane\"}], \"name\") // [\"John\", \"Jane\"]`\n`[{age: 30}, {age: 25}]|mapField(\"age\") // [30, 25]`\n`mapField([{x: 1, y: 2}, {x: 3, y: 4}], \"x\") // [1, 3]`\n\n**Parameters:**\n- `input` (array): The input array of objects to extract fields from.\n- `field` (string): The field name to extract from each object.\n\n**Returns:** A new array with extracted field values, or empty array if input is not an array.",
    "examples": [
      "mapField([{name: \"John\"}, {name: \"Jane\"}], \"name\") // [\"John\", \"Jane\"]",
      "[{age: 30}, {age: 25}]|mapField(\"age\") // [30, 25]",
      "mapField([{x: 1, y: 2}, {x: 3, y: 4}], \"x\") // [1, 3]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of objects to extract fields from.",
        "type": "array",
        "optional": false
      },
      {
        "name": "field",
        "description": "The field name to extract from each object.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with extracted field values, or empty array if input is not an array."
    },
    "insertText": "mapField(${1:field})"
  },
  {
    "type": "transform",
    "name": "max",
    "label": "max",
    "description": "Finds the maximum value in an array of numbers.",
    "detail": "JEXL transform",
    "documentation": "Finds the maximum value in an array of numbers.\n\n**Examples:**\n`max([1, 5, 3, 2]) // 5`\n`[10, 20, 15]|max // 20`\n`max(1, 5, 3, 2) // 5`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The maximum value, or NaN if input is not an array.",
    "examples": [
      "max([1, 5, 3, 2]) // 5",
      "[10, 20, 15]|max // 20",
      "max(1, 5, 3, 2) // 5"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The maximum value, or NaN if input is not an array."
    },
    "insertText": "max"
  },
  {
    "type": "transform",
    "name": "objectMerge",
    "label": "merge",
    "description": "Returns a new object with the properties of the input objects merged together.",
    "detail": "JEXL transform",
    "documentation": "Returns a new object with the properties of the input objects merged together.\n\n**Examples:**\n`merge({a: 1}, {b: 2}) // {a: 1, b: 2}`\n`{a: 1}|merge({b: 2}, {c: 3}) // {a: 1, b: 2, c: 3}`\n`merge({a: 1}, {a: 2}) // {a: 2} (later values override)`\n\n**Parameters:**\n- `args` (array): The input objects to merge.\n\n**Returns:** A new object with all properties merged together.",
    "examples": [
      "merge({a: 1}, {b: 2}) // {a: 1, b: 2}",
      "{a: 1}|merge({b: 2}, {c: 3}) // {a: 1, b: 2, c: 3}",
      "merge({a: 1}, {a: 2}) // {a: 2} (later values override)"
    ],
    "parameters": [
      {
        "name": "args",
        "description": "The input objects to merge.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "Record",
      "description": "A new object with all properties merged together."
    },
    "insertText": "merge",
    "aliases": [
      "objectMerge",
      "merge"
    ]
  },
  {
    "type": "transform",
    "name": "toDateTime",
    "label": "millisToDateTime",
    "description": "Parses the number of milliseconds since the Unix epoch or parses a string (with or without specified format) and returns the date and time in the ISO 8601 format.",
    "detail": "JEXL transform",
    "documentation": "Parses the number of milliseconds since the Unix epoch or parses a string (with or without specified format) and returns the date and time in the ISO 8601 format.\n\n**Examples:**\n`toDateTime(1703505000000) // \"2023-12-25T10:30:00.000Z\"`\n`toDateTime(\"2023-12-25\") // \"2023-12-25T00:00:00.000Z\"`\n`toDateTime(\"25/12/2023\", \"dd/MM/yyyy\") // \"2023-12-25T00:00:00.000Z\"`\n\n**Parameters:**\n- `input` (union?): Optional timestamp in milliseconds or date string.\n- `format` (string?): Optional format string for parsing date strings.\n\n**Returns:** The date and time as an ISO 8601 string, or undefined if parsing fails.",
    "examples": [
      "toDateTime(1703505000000) // \"2023-12-25T10:30:00.000Z\"",
      "toDateTime(\"2023-12-25\") // \"2023-12-25T00:00:00.000Z\"",
      "toDateTime(\"25/12/2023\", \"dd/MM/yyyy\") // \"2023-12-25T00:00:00.000Z\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "Optional timestamp in milliseconds or date string.",
        "type": "union",
        "optional": true
      },
      {
        "name": "format",
        "description": "Optional format string for parsing date strings.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The date and time as an ISO 8601 string, or undefined if parsing fails."
    },
    "insertText": "millisToDateTime(${1:format?})",
    "aliases": [
      "toDateTime",
      "fromMillis",
      "dateTimeString",
      "millisToDateTime"
    ]
  },
  {
    "type": "transform",
    "name": "min",
    "label": "min",
    "description": "Finds the minimum value in an array of numbers.",
    "detail": "JEXL transform",
    "documentation": "Finds the minimum value in an array of numbers.\n\n**Examples:**\n`min([1, 5, 3, 2]) // 1`\n`[10, 20, 15]|min // 10`\n`min(1, 5, 3, 2) // 1`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The minimum value, or NaN if input is not an array.",
    "examples": [
      "min([1, 5, 3, 2]) // 1",
      "[10, 20, 15]|min // 10",
      "min(1, 5, 3, 2) // 1"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The minimum value, or NaN if input is not an array."
    },
    "insertText": "min"
  },
  {
    "type": "transform",
    "name": "not",
    "label": "not",
    "description": "Returns the logical NOT of the input.",
    "detail": "JEXL transform",
    "documentation": "Returns the logical NOT of the input.\n\n**Examples:**\n`not(true) // false`\n`false|not // true`\n`not(0) // true`\n\n**Parameters:**\n- `input` (unknown): The input to apply logical NOT to.\n\n**Returns:** The logical NOT of the input converted to boolean.",
    "examples": [
      "not(true) // false",
      "false|not // true",
      "not(0) // true"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to apply logical NOT to.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "The logical NOT of the input converted to boolean."
    },
    "insertText": "not"
  },
  {
    "type": "transform",
    "name": "toNumber",
    "label": "number",
    "description": "Converts the input to a number.",
    "detail": "JEXL transform",
    "documentation": "Converts the input to a number.\n\n**Examples:**\n`toNumber(\"123\") // 123`\n`\"45.67\"|toNumber // 45.67`\n`toNumber(\"abc\") // NaN`\n\n**Parameters:**\n- `input` (unknown): The input to convert to a number.\n\n**Returns:** The numeric value, or NaN if conversion fails.",
    "examples": [
      "toNumber(\"123\") // 123",
      "\"45.67\"|toNumber // 45.67",
      "toNumber(\"abc\") // NaN"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to a number.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The numeric value, or NaN if conversion fails."
    },
    "insertText": "number",
    "aliases": [
      "toNumber",
      "parseFloat",
      "number",
      "float",
      "toFloat"
    ]
  },
  {
    "type": "transform",
    "name": "pad",
    "label": "pad",
    "description": "Pads the input string to the specified width.",
    "detail": "JEXL transform",
    "documentation": "Pads the input string to the specified width.\n\n**Examples:**\n`pad(\"hello\", 10) // \"hello     \"`\n`pad(\"world\", -8, \"0\") // \"000world\"`\n`\"foo\"|pad(5, \".\") // \"foo..\"`\n\n**Parameters:**\n- `input` (unknown): The input to pad. Non-string inputs are converted to JSON string first.\n- `width` (number): The target width. Positive values pad to the right, negative values pad to the left.\n- `char` (string): The character to use for padding. Defaults to space.\n\n**Returns:** The padded string.",
    "examples": [
      "pad(\"hello\", 10) // \"hello     \"",
      "pad(\"world\", -8, \"0\") // \"000world\"",
      "\"foo\"|pad(5, \".\") // \"foo..\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to pad. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "width",
        "description": "The target width. Positive values pad to the right, negative values pad to the left.",
        "type": "number",
        "optional": false
      },
      {
        "name": "char",
        "description": "The character to use for padding. Defaults to space.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The padded string."
    },
    "insertText": "pad(${1:width}, ${2:char})"
  },
  {
    "type": "transform",
    "name": "parseInteger",
    "label": "parseInteger",
    "description": "Parses a string and returns an integer.",
    "detail": "JEXL transform",
    "documentation": "Parses a string and returns an integer.\n\n**Examples:**\n`parseInteger(\"123\") // 123`\n`\"45.67\"|parseInteger // 45`\n`parseInteger(123.89) // 123`\n\n**Parameters:**\n- `input` (unknown): The input to parse as an integer.\n\n**Returns:** The integer value, or NaN if parsing fails.",
    "examples": [
      "parseInteger(\"123\") // 123",
      "\"45.67\"|parseInteger // 45",
      "parseInteger(123.89) // 123"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to parse as an integer.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The integer value, or NaN if parsing fails."
    },
    "insertText": "parseInteger",
    "aliases": [
      "parseInt",
      "toInt",
      "integer"
    ]
  },
  {
    "type": "transform",
    "name": "pascalCase",
    "label": "pascalCase",
    "description": "Converts the input string to pascal case.",
    "detail": "JEXL transform",
    "documentation": "Converts the input string to pascal case.\n\n**Examples:**\n`pascalCase(\"foo bar\") // \"FooBar\"`\n`\"hello-world\"|pascalCase // \"HelloWorld\"`\n`pascalCase(\"HELLO_WORLD\") // \"HelloWorld\"`\n\n**Parameters:**\n- `input` (unknown): The input string to convert to pascal case.\n\n**Returns:** The pascal case string, or empty string if input is not a string.",
    "examples": [
      "pascalCase(\"foo bar\") // \"FooBar\"",
      "\"hello-world\"|pascalCase // \"HelloWorld\"",
      "pascalCase(\"HELLO_WORLD\") // \"HelloWorld\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to convert to pascal case.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The pascal case string, or empty string if input is not a string."
    },
    "insertText": "pascalCase",
    "aliases": [
      "pascalcase",
      "toPascalCase"
    ]
  },
  {
    "type": "transform",
    "name": "power",
    "label": "power",
    "description": "Returns the value of a number raised to a power.",
    "detail": "JEXL transform",
    "documentation": "Returns the value of a number raised to a power.\n\n**Examples:**\n`power(2, 3) // 8`\n`(2)|power(4) // 16`\n`power(9) // 81 (defaults to power of 2)`\n\n**Parameters:**\n- `input` (unknown): The base number.\n- `exponent` (number?): The exponent to raise the base to. Defaults to 2.\n\n**Returns:** The result of base raised to the exponent, or NaN if input cannot be converted to a number.",
    "examples": [
      "power(2, 3) // 8",
      "(2)|power(4) // 16",
      "power(9) // 81 (defaults to power of 2)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The base number.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "exponent",
        "description": "The exponent to raise the base to. Defaults to 2.",
        "type": "number",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "The result of base raised to the exponent, or NaN if input cannot be converted to a number."
    },
    "insertText": "power(${1:exponent?})"
  },
  {
    "type": "transform",
    "name": "arrayReduce",
    "label": "reduce",
    "description": "Returns an aggregated value derived from applying the function parameter successively to each value in array in combination with the result of the previous application of the function.\r",
    "detail": "JEXL transform",
    "documentation": "Returns an aggregated value derived from applying the function parameter successively to each value in array in combination with the result of the previous application of the function.\r\nThe expression must be a valid JEXL expression string, and behaves like an infix operator between each value within the array.\r\nThe relative context provided to the expression is an object with the properties accumulator, value, index and array (the original array).\n\n**Examples:**\n`reduce([1, 2, 3, 4], \"accumulator + value\", 0) // 10`\n`[1, 2, 3]|reduce(\"accumulator * value\", 1) // 6`\n`reduce([\"a\", \"b\", \"c\"], \"accumulator + value\", \"\") // \"abc\"`\n\n**Parameters:**\n- `input` (array): The input array to reduce.\n- `expression` (string): The JEXL expression to apply for each reduction step.\n- `initialValue` (unknown): The initial value for the accumulator.\n\n**Returns:** The final accumulated value, or undefined if input is not an array.",
    "examples": [
      "reduce([1, 2, 3, 4], \"accumulator + value\", 0) // 10",
      "[1, 2, 3]|reduce(\"accumulator * value\", 1) // 6",
      "reduce([\"a\", \"b\", \"c\"], \"accumulator + value\", \"\") // \"abc\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to reduce.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "The JEXL expression to apply for each reduction step.",
        "type": "string",
        "optional": false
      },
      {
        "name": "initialValue",
        "description": "The initial value for the accumulator.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "unknown",
      "description": "The final accumulated value, or undefined if input is not an array."
    },
    "insertText": "reduce(${1:expression}, ${2:initialValue})",
    "aliases": [
      "arrayReduce",
      "reduce"
    ]
  },
  {
    "type": "transform",
    "name": "replace",
    "label": "replace",
    "description": "Replaces occurrences of a specified string with a replacement string.",
    "detail": "JEXL transform",
    "documentation": "Replaces occurrences of a specified string with a replacement string.\n\n**Examples:**\n`replace(\"foo-bar-baz\", \"-\", \"_\") // \"foo_bar_baz\"`\n`\"hello world\"|replace(\"world\", \"there\") // \"hello there\"`\n`replace(\"test test test\", \"test\", \"demo\") // \"demo demo demo\"`\n\n**Parameters:**\n- `input` (unknown): The input string to perform replacements on.\n- `search` (string): The string to search for and replace.\n- `replacement` (string): The string to replace matches with. Defaults to empty string.\n\n**Returns:** The string with replacements made, or undefined if input is not a string.",
    "examples": [
      "replace(\"foo-bar-baz\", \"-\", \"_\") // \"foo_bar_baz\"",
      "\"hello world\"|replace(\"world\", \"there\") // \"hello there\"",
      "replace(\"test test test\", \"test\", \"demo\") // \"demo demo demo\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to perform replacements on.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The string to search for and replace.",
        "type": "string",
        "optional": false
      },
      {
        "name": "replacement",
        "description": "The string to replace matches with. Defaults to empty string.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The string with replacements made, or undefined if input is not a string."
    },
    "insertText": "replace(${1:search}, ${2:replacement})"
  },
  {
    "type": "transform",
    "name": "arrayReverse",
    "label": "reverse",
    "description": "Reverses the elements of an array.",
    "detail": "JEXL transform",
    "documentation": "Reverses the elements of an array.\n\n**Examples:**\n`reverse([1, 2, 3]) // [3, 2, 1]`\n`[1, 2, 3]|reverse // [3, 2, 1]`\n`reverse([\"a\", \"b\", \"c\"]) // [\"c\", \"b\", \"a\"]`\n\n**Parameters:**\n- `input` (array): The input values to reverse.\n\n**Returns:** A new array with elements in reverse order, or empty array if no valid input.",
    "examples": [
      "reverse([1, 2, 3]) // [3, 2, 1]",
      "[1, 2, 3]|reverse // [3, 2, 1]",
      "reverse([\"a\", \"b\", \"c\"]) // [\"c\", \"b\", \"a\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input values to reverse.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new array with elements in reverse order, or empty array if no valid input."
    },
    "insertText": "reverse",
    "aliases": [
      "arrayReverse",
      "reverse"
    ]
  },
  {
    "type": "transform",
    "name": "round",
    "label": "round",
    "description": "Rounds a number to the nearest integer or to specified decimal places.",
    "detail": "JEXL transform",
    "documentation": "Rounds a number to the nearest integer or to specified decimal places.\n\n**Examples:**\n`round(3.7) // 4`\n`round(3.14159, 2) // 3.14`\n`(2.567)|round // 3`\n\n**Parameters:**\n- `input` (unknown): The input number to round.\n- `decimals` (number?): Optional number of decimal places to round to.\n\n**Returns:** The rounded number, or NaN if input cannot be converted to a number.",
    "examples": [
      "round(3.7) // 4",
      "round(3.14159, 2) // 3.14",
      "(2.567)|round // 3"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to round.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "decimals",
        "description": "Optional number of decimal places to round to.",
        "type": "number",
        "optional": true
      }
    ],
    "returns": {
      "type": "number",
      "description": "The rounded number, or NaN if input cannot be converted to a number."
    },
    "insertText": "round(${1:decimals?})"
  },
  {
    "type": "transform",
    "name": "arrayShuffle",
    "label": "shuffle",
    "description": "Shuffles the elements of an array randomly.",
    "detail": "JEXL transform",
    "documentation": "Shuffles the elements of an array randomly.\n\n**Examples:**\n`shuffle([1, 2, 3]) // [2, 1, 3] (random order)`\n`[1, 2, 3]|shuffle // [3, 1, 2] (random order)`\n`shuffle([\"a\", \"b\", \"c\"]) // [\"c\", \"a\", \"b\"] (random order)`\n\n**Parameters:**\n- `input` (array): The input array to shuffle.\n\n**Returns:** The same array with elements randomly shuffled, or empty array if input is not an array.",
    "examples": [
      "shuffle([1, 2, 3]) // [2, 1, 3] (random order)",
      "[1, 2, 3]|shuffle // [3, 1, 2] (random order)",
      "shuffle([\"a\", \"b\", \"c\"]) // [\"c\", \"a\", \"b\"] (random order)"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to shuffle.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "The same array with elements randomly shuffled, or empty array if input is not an array."
    },
    "insertText": "shuffle",
    "aliases": [
      "arrayShuffle",
      "shuffle"
    ]
  },
  {
    "type": "transform",
    "name": "arraySort",
    "label": "sort",
    "description": "Sorts the elements of an array.",
    "detail": "JEXL transform",
    "documentation": "Sorts the elements of an array.\n\n**Examples:**\n`sort([3, 1, 2]) // [1, 2, 3]`\n`[3, 1, 2]|sort // [1, 2, 3]`\n`sort([{age: 30}, {age: 20}], \"age\") // [{age: 20}, {age: 30}]`\n\n**Parameters:**\n- `input` (array): The input array to sort.\n- `expression` (string?): Optional JEXL expression to determine sort value for objects.\n- `descending` (boolean?): Optional flag to sort in descending order.\n\n**Returns:** A new sorted array, or empty array if input is not an array.",
    "examples": [
      "sort([3, 1, 2]) // [1, 2, 3]",
      "[3, 1, 2]|sort // [1, 2, 3]",
      "sort([{age: 30}, {age: 20}], \"age\") // [{age: 20}, {age: 30}]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array to sort.",
        "type": "array",
        "optional": false
      },
      {
        "name": "expression",
        "description": "Optional JEXL expression to determine sort value for objects.",
        "type": "string",
        "optional": true
      },
      {
        "name": "descending",
        "description": "Optional flag to sort in descending order.",
        "type": "boolean",
        "optional": true
      }
    ],
    "returns": {
      "type": "array",
      "description": "A new sorted array, or empty array if input is not an array."
    },
    "insertText": "sort(${1:expression?}, ${2:descending?})",
    "aliases": [
      "arraySort",
      "order",
      "sort"
    ]
  },
  {
    "type": "transform",
    "name": "split",
    "label": "split",
    "description": "Splits the input string into an array of substrings.",
    "detail": "JEXL transform",
    "documentation": "Splits the input string into an array of substrings.\n\n**Examples:**\n`split(\"foo,bar,baz\", \",\") // [\"foo\", \"bar\", \"baz\"]`\n`\"one-two-three\"|split(\"-\") // [\"one\", \"two\", \"three\"]`\n`split(\"hello world\", \" \") // [\"hello\", \"world\"]`\n\n**Parameters:**\n- `input` (unknown): The input string to split.\n- `separator` (string): The separator string to split on.\n\n**Returns:** An array of substrings, or empty array if input is not a string.",
    "examples": [
      "split(\"foo,bar,baz\", \",\") // [\"foo\", \"bar\", \"baz\"]",
      "\"one-two-three\"|split(\"-\") // [\"one\", \"two\", \"three\"]",
      "split(\"hello world\", \" \") // [\"hello\", \"world\"]"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to split.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "separator",
        "description": "The separator string to split on.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of substrings, or empty array if input is not a string."
    },
    "insertText": "split(${1:separator})"
  },
  {
    "type": "transform",
    "name": "sqrt",
    "label": "sqrt",
    "description": "Returns the square root of a number.",
    "detail": "JEXL transform",
    "documentation": "Returns the square root of a number.\n\n**Examples:**\n`sqrt(16) // 4`\n`(25)|sqrt // 5`\n`sqrt(2) // 1.4142135623730951`\n\n**Parameters:**\n- `input` (unknown): The input number to get the square root of.\n\n**Returns:** The square root of the input, or NaN if input cannot be converted to a number.",
    "examples": [
      "sqrt(16) // 4",
      "(25)|sqrt // 5",
      "sqrt(2) // 1.4142135623730951"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input number to get the square root of.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The square root of the input, or NaN if input cannot be converted to a number."
    },
    "insertText": "sqrt"
  },
  {
    "type": "transform",
    "name": "startsWith",
    "label": "startsWith",
    "description": "Checks if the input string starts with the specified substring.",
    "detail": "JEXL transform",
    "documentation": "Checks if the input string starts with the specified substring.\n\n**Examples:**\n`startsWith(\"hello world\", \"hello\") // true`\n`\"foo-bar\"|startsWith(\"foo\") // true`\n`startsWith(\"test\", \"xyz\") // false`\n\n**Parameters:**\n- `input` (unknown): The input string to check.\n- `search` (string): The substring to search for at the beginning.\n\n**Returns:** True if the input starts with the search string, false otherwise.",
    "examples": [
      "startsWith(\"hello world\", \"hello\") // true",
      "\"foo-bar\"|startsWith(\"foo\") // true",
      "startsWith(\"test\", \"xyz\") // false"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to check.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "search",
        "description": "The substring to search for at the beginning.",
        "type": "string",
        "optional": false
      }
    ],
    "returns": {
      "type": "boolean",
      "description": "True if the input starts with the search string, false otherwise."
    },
    "insertText": "startsWith(${1:search})"
  },
  {
    "type": "transform",
    "name": "toString",
    "label": "string",
    "description": "Casts the input to a string.",
    "detail": "JEXL transform",
    "documentation": "Casts the input to a string.\n\n**Examples:**\n`string(123) // \"123\"`\n`123|string // \"123\"`\n\n**Parameters:**\n- `input` (unknown): The input can be any type.\n- `prettify` (boolean): If true, the output will be pretty-printed.\n\n**Returns:** The input converted to a JSON string representation.",
    "examples": [
      "string(123) // \"123\"",
      "123|string // \"123\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input can be any type.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "prettify",
        "description": "If true, the output will be pretty-printed.",
        "type": "boolean",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The input converted to a JSON string representation."
    },
    "insertText": "string(${1:prettify})",
    "aliases": [
      "toString",
      "string"
    ]
  },
  {
    "type": "transform",
    "name": "substring",
    "label": "substring",
    "description": "Gets a substring of a string.",
    "detail": "JEXL transform",
    "documentation": "Gets a substring of a string.\n\n**Examples:**\n`substring(\"hello world\", 0, 5) // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `start` (number): The starting index of the substring.\n- `length` (number): The length of the substring.\n\n**Returns:** The substring of the input string.",
    "examples": [
      "substring(\"hello world\", 0, 5) // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "start",
        "description": "The starting index of the substring.",
        "type": "number",
        "optional": false
      },
      {
        "name": "length",
        "description": "The length of the substring.",
        "type": "number",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring of the input string."
    },
    "insertText": "substring(${1:start}, ${2:length})"
  },
  {
    "type": "transform",
    "name": "substringAfter",
    "label": "substringAfter",
    "description": "Returns the substring after the first occurrence of the character sequence chars in str.",
    "detail": "JEXL transform",
    "documentation": "Returns the substring after the first occurrence of the character sequence chars in str.\n\n**Examples:**\n`substringAfter(\"hello world\", \" \") // \"world\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `chars` (unknown): The character sequence to search for.\n\n**Returns:** The substring after the first occurrence of the character sequence chars in str.",
    "examples": [
      "substringAfter(\"hello world\", \" \") // \"world\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "chars",
        "description": "The character sequence to search for.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring after the first occurrence of the character sequence chars in str."
    },
    "insertText": "substringAfter(${1:chars})"
  },
  {
    "type": "transform",
    "name": "substringBefore",
    "label": "substringBefore",
    "description": "Returns the substring before the first occurrence of the character sequence chars in str.",
    "detail": "JEXL transform",
    "documentation": "Returns the substring before the first occurrence of the character sequence chars in str.\n\n**Examples:**\n`substringBefore(\"hello world\", \" \") // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string.\n- `chars` (unknown): The character sequence to search for.\n\n**Returns:** The substring before the first occurrence of the character sequence chars in str.",
    "examples": [
      "substringBefore(\"hello world\", \" \") // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "chars",
        "description": "The character sequence to search for.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The substring before the first occurrence of the character sequence chars in str."
    },
    "insertText": "substringBefore(${1:chars})"
  },
  {
    "type": "transform",
    "name": "sum",
    "label": "sum",
    "description": "Calculates the sum of an array of numbers.",
    "detail": "JEXL transform",
    "documentation": "Calculates the sum of an array of numbers.\n\n**Examples:**\n`sum([1, 2, 3, 4]) // 10`\n`[1.5, 2.5, 3.0]|sum // 7`\n`sum(1, 2, 3, 4) // 10`\n\n**Parameters:**\n- `input` (array): The input array of numbers or individual number arguments.\n\n**Returns:** The sum of all numbers, or NaN if input is not an array.",
    "examples": [
      "sum([1, 2, 3, 4]) // 10",
      "[1.5, 2.5, 3.0]|sum // 7",
      "sum(1, 2, 3, 4) // 10"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input array of numbers or individual number arguments.",
        "type": "array",
        "optional": false
      }
    ],
    "returns": {
      "type": "number",
      "description": "The sum of all numbers, or NaN if input is not an array."
    },
    "insertText": "sum"
  },
  {
    "type": "transform",
    "name": "arrayToObject",
    "label": "toObject",
    "description": "Creates a new object based on key-value pairs or string keys.",
    "detail": "JEXL transform",
    "documentation": "Creates a new object based on key-value pairs or string keys.\n\n**Examples:**\n`toObject([[\"name\", \"John\"], [\"age\", 30]]) // {name: \"John\", age: 30}`\n`toObject(\"name\", \"John\") // {name: \"John\"}`\n`toObject([\"key1\", \"key2\"], \"defaultValue\") // {key1: \"defaultValue\", key2: \"defaultValue\"}`\n\n**Parameters:**\n- `input` (unknown): The input string key or array of key-value pairs.\n- `val` (unknown?): Optional default value for string keys or when array elements are strings.\n\n**Returns:** A new object created from the input, or empty object if input is invalid.",
    "examples": [
      "toObject([[\"name\", \"John\"], [\"age\", 30]]) // {name: \"John\", age: 30}",
      "toObject(\"name\", \"John\") // {name: \"John\"}",
      "toObject([\"key1\", \"key2\"], \"defaultValue\") // {key1: \"defaultValue\", key2: \"defaultValue\"}"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string key or array of key-value pairs.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "val",
        "description": "Optional default value for string keys or when array elements are strings.",
        "type": "unknown",
        "optional": true
      }
    ],
    "returns": {
      "type": "any",
      "description": "A new object created from the input, or empty object if input is invalid."
    },
    "insertText": "toObject(${1:val?})",
    "aliases": [
      "arrayToObject",
      "fromEntries",
      "toObject"
    ]
  },
  {
    "type": "transform",
    "name": "trim",
    "label": "trim",
    "description": "Trims whitespace from both ends of a string.",
    "detail": "JEXL transform",
    "documentation": "Trims whitespace from both ends of a string.\n\n**Examples:**\n`trim(\"  hello  \") // \"hello\"`\n`\"  world  \"|trim // \"world\"`\n`trim(\"__hello__\", \"_\") // \"hello\"`\n\n**Parameters:**\n- `input` (unknown): The input string to trim.\n- `trimChar` (string?): Optional character to trim instead of whitespace.\n\n**Returns:** The trimmed string, or empty string if input is not a string.",
    "examples": [
      "trim(\"  hello  \") // \"hello\"",
      "\"  world  \"|trim // \"world\"",
      "trim(\"__hello__\", \"_\") // \"hello\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input string to trim.",
        "type": "unknown",
        "optional": false
      },
      {
        "name": "trimChar",
        "description": "Optional character to trim instead of whitespace.",
        "type": "string",
        "optional": true
      }
    ],
    "returns": {
      "type": "string",
      "description": "The trimmed string, or empty string if input is not a string."
    },
    "insertText": "trim(${1:trimChar?})"
  },
  {
    "type": "transform",
    "name": "uppercase",
    "label": "uppercase",
    "description": "Converts the input string to uppercase.",
    "detail": "JEXL transform",
    "documentation": "Converts the input string to uppercase.\n\n**Examples:**\n`uppercase(\"hello\") // \"HELLO\"`\n`\"hello world\"|uppercase // \"HELLO WORLD\"`\n\n**Parameters:**\n- `input` (unknown): The input to convert to uppercase. Non-string inputs are converted to JSON string first.\n\n**Returns:** The uppercase string.",
    "examples": [
      "uppercase(\"hello\") // \"HELLO\"",
      "\"hello world\"|uppercase // \"HELLO WORLD\""
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input to convert to uppercase. Non-string inputs are converted to JSON string first.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "string",
      "description": "The uppercase string."
    },
    "insertText": "uppercase",
    "aliases": [
      "upper"
    ]
  },
  {
    "type": "transform",
    "name": "objectValues",
    "label": "values",
    "description": "Returns the values of an object as an array.",
    "detail": "JEXL transform",
    "documentation": "Returns the values of an object as an array.\n\n**Examples:**\n`values({name: \"John\", age: 30}) // [\"John\", 30]`\n`{a: 1, b: 2}|values // [1, 2]`\n`values({}) // []`\n\n**Parameters:**\n- `input` (unknown): The input object to get values from.\n\n**Returns:** An array of object values, or undefined if input is not an object.",
    "examples": [
      "values({name: \"John\", age: 30}) // [\"John\", 30]",
      "{a: 1, b: 2}|values // [1, 2]",
      "values({}) // []"
    ],
    "parameters": [
      {
        "name": "input",
        "description": "The input object to get values from.",
        "type": "unknown",
        "optional": false
      }
    ],
    "returns": {
      "type": "array",
      "description": "An array of object values, or undefined if input is not an object."
    },
    "insertText": "values",
    "aliases": [
      "objectValues",
      "values"
    ]
  }
];
